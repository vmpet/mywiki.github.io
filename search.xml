<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FHMM模型数据接口尝试修改</title>
    <url>/mywiki.github.io/55978/</url>
    <content><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> cm<span class="token punctuation">,</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> hmmlearn <span class="token keyword">import</span> hmm
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
<span class="token keyword">import</span> os

<span class="token comment"># Get filename</span>
<span class="token comment"># key_obj : (nilmtk.Key) the house and channel to load</span>
path <span class="token operator">=</span> <span class="token string">"E:/office/data/pythonProject/venv/nilm_data_house6/"</span>
tz <span class="token operator">=</span> <span class="token string">'US/Eastern'</span>

<span class="token keyword">def</span> <span class="token function">_load_csv</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> tz<span class="token punctuation">,</span> drop_duplicates<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sort_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Load data</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> names<span class="token operator">=</span>columns<span class="token punctuation">,</span>
                     dtype<span class="token operator">=</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">:</span> np<span class="token punctuation">.</span>float32 <span class="token keyword">for</span> m <span class="token keyword">in</span> columns<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment"># Convert the integer index column to timezone-aware datetime</span>
    df<span class="token punctuation">.</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>values<span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">,</span> utc<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    df <span class="token operator">=</span> df<span class="token punctuation">.</span>tz_convert<span class="token punctuation">(</span>tz<span class="token punctuation">)</span>

    <span class="token keyword">if</span> sort_index<span class="token punctuation">:</span>
        df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># raw REDD data isn't always sorted</span>

    <span class="token keyword">if</span> drop_duplicates<span class="token punctuation">:</span>
        dups_in_index <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> dups_in_index<span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token operator">~</span>dups_in_index<span class="token punctuation">]</span>

    <span class="token keyword">return</span> df
<span class="token keyword">def</span> <span class="token function">load_dat</span><span class="token punctuation">(</span>key_obj<span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">:</span>
    filename <span class="token operator">=</span> <span class="token string">'channel_&#123;:d&#125;.dat'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key_obj<span class="token punctuation">)</span>
    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
    hg <span class="token operator">=</span> _load_csv<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> column<span class="token punctuation">,</span> tz<span class="token punctuation">)</span>
    <span class="token keyword">return</span> hg


<span class="token comment">## read lables</span>
mm <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        data1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
data_labels <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> <span class="token punctuation">(</span>mm<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> f<span class="token punctuation">,</span> line<span class="token punctuation">)</span>

<span class="token comment">## read meter readings</span>
elec <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ggg <span class="token operator">=</span> load_dat<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'power'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    elec<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_labels<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_labels<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ggg
<span class="token keyword">del</span> ggg<span class="token punctuation">,</span> i<span class="token punctuation">,</span> data_labels

<span class="token comment"># check names </span>
<span class="token comment"># elec.keys()</span>
<span class="token comment">## check data</span>
meter_elec <span class="token operator">=</span> elec<span class="token punctuation">[</span><span class="token string">'stove4'</span><span class="token punctuation">]</span>
<span class="token comment"># hg.values</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>meter_elec<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># </span>
<span class="token comment"># def time_genertor(time_start0, freq0):</span>
<span class="token comment">#     timestamp = pd.Timestamp(time_start0)</span>
<span class="token comment">#     series = pd.Series(np.NaN, index=[timestamp])</span>
<span class="token comment">#     resampled = series.resample(freq0).mean()</span>
<span class="token comment">#     start = resampled.index[0]</span>
<span class="token comment">#     return start</span>
<span class="token comment"># </span>
<span class="token comment"># def split_timeframes(timeframes, duration_threshold):</span>
<span class="token comment">#     # TODO: put this into TimeFrameGroup. #316</span>
<span class="token comment">#     for timeframe in timeframes:</span>
<span class="token comment">#         for split in timeframe.split(duration_threshold):</span>
<span class="token comment">#             yield split</span>
<span class="token comment"># def normalise_timestamp(timestamp, freq):</span>
<span class="token comment">#     """Returns the nearest Timestamp to `timestamp` which would be</span>
<span class="token comment">#     in the set of timestamps returned by pd.DataFrame.resample(freq=freq)</span>
<span class="token comment">#     """</span>
<span class="token comment">#     timestamp = pd.Timestamp(timestamp)</span>
<span class="token comment">#     series = pd.Series(np.NaN, index=[timestamp])</span>
<span class="token comment">#     resampled = series.resample(freq).mean()</span>
<span class="token comment">#     return resampled.index[0]</span>
<span class="token comment"># </span>
<span class="token comment"># sample_period = 60 * 2</span>
<span class="token comment"># freq = '&#123;:d&#125;S'.format(int(sample_period))</span>
<span class="token comment"># </span>
<span class="token comment"># time_points=split_timeframes(meter_elec.index, sample_period)</span>
<span class="token comment"># time_index=time_points.gi_frame.f_locals['timeframes']</span>


meter_elec<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>


X <span class="token operator">=</span> meter_elec
<span class="token comment">#数据集的划分</span>
X_Test <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">]</span>
X_Pre <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集的大小："</span><span class="token punctuation">,</span> X_Test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>     <span class="token comment">#(1474, 2)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集的大小："</span><span class="token punctuation">,</span> X_Pre<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment">#(30, 2)</span>

<span class="token comment">## 给定隐特征的数目</span>
n <span class="token operator">=</span> <span class="token number">3</span>

learnt_model<span class="token operator">=</span> hmm<span class="token punctuation">.</span>GaussianHMM<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"full"</span><span class="token punctuation">)</span>
learnt_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_Test<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
learnt_model<span class="token punctuation">.</span>means_
learnt_model<span class="token punctuation">.</span>transmat_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>hmm</tag>
      </tags>
  </entry>
  <entry>
    <title>NILMTK阅读</title>
    <url>/mywiki.github.io/22628/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ol>
<li>最理想的免费在线<a href="https://www.aconvert.com/cn/pdf/pdf-to-html/">转换</a></li>
</ol>
<h3 id="CO算法"><a href="#CO算法" class="headerlink" title="CO算法"></a>CO算法</h3><p>分解时候的函数是用的disaggregate_chunk，得到房间的总功率曲线，并对5种电器进行分解。</p>
<p>将之前train()过程的质心提取出来，并做一个枚举操作，cartesian函数是做枚举操作，由5个模型，每个模型3个状态，则可得3<em>3</em>3<em>3</em>3=243行，5列的状态组合数据。</p>
<p>对状态数据进行按列累加，然后调用find_nearest函数，求得负荷数据和状态数据的残差和具体索引值。find_nearest的传入参数有按列累加之后的状态数据，用户的总功率数据。</p>
<h3 id="FHMM"><a href="#FHMM" class="headerlink" title="FHMM"></a>FHMM</h3><p>对每个电器的数据，进行聚类后确定每个电器的状态</p>
<p>遍历每个电器</p>
<p>利用GUSSAINHMM模型进行模型训练</p>
<p>对GaussianHMM计算的means_结果进行排序，然后根据means_索引值得到相应的startprob,covars,transmat等，然后在进行一次GaussianHMM，并对参数赋值。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> hmmlearn<span class="token punctuation">.</span>hmm <span class="token keyword">import</span> GaussianHMM
X_train <span class="token operator">=</span> h1_fridge<span class="token punctuation">[</span><span class="token string">'2014-06-20'</span><span class="token punctuation">:</span><span class="token string">'2014-06-22'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'meter_reading'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
X_test <span class="token operator">=</span> h1_fridge<span class="token punctuation">[</span><span class="token string">'2014-06-23'</span><span class="token punctuation">:</span><span class="token string">'2014-06-24'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'meter_reading'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

model <span class="token operator">=</span> GaussianHMM<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> covariance_type<span class="token operator">=</span><span class="token string">"diag"</span><span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>

hidden_states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
hidden_state_means <span class="token operator">=</span> model<span class="token punctuation">.</span>means_


ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_axis<span class="token punctuation">,</span> X_test<span class="token punctuation">[</span><span class="token punctuation">:</span>n_obs<span class="token punctuation">]</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_axis<span class="token punctuation">,</span> hidden_states<span class="token punctuation">[</span><span class="token punctuation">:</span>n_obs<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>hidden_states<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>transmat_<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>对数似然值：model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test_6<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>n_components<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;th hidden state"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mean = "</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>means_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"var = "</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>model<span class="token punctuation">.</span>covars_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    

<span class="token keyword">def</span> <span class="token function">HMM_accuracy</span><span class="token punctuation">(</span>obs_levels<span class="token punctuation">,</span>hidden_states<span class="token punctuation">,</span>state_means<span class="token punctuation">)</span><span class="token punctuation">:</span>
    predict_levels <span class="token operator">=</span> <span class="token punctuation">[</span>state_means<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token keyword">for</span> state <span class="token keyword">in</span> hidden_states<span class="token punctuation">]</span>
    test_error <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>obs_levels<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>predict_levels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>obs_levels<span class="token punctuation">)</span>
    <span class="token keyword">return</span> test_error

state_means <span class="token operator">=</span> state_means<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>HMM_accuracy<span class="token punctuation">(</span>X_test<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>hidden_states_test<span class="token punctuation">,</span>state_means<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<pre class="line-numbers language-none"><code class="language-none">states &#x3D; cluster(meter_data, max_num_clusters&#x3D;3)
num_total_states &#x3D; len(states)
learnt_model[appliance] &#x3D; hmm.GaussianHMM(num_total_states, &quot;full&quot;)
learnt_model[appliance].fit(X)

startprob, means, covars, transmat &#x3D; sort_learnt_parameters(
                learnt_model[meter].startprob_, learnt_model[meter].means_,
                learnt_model[meter].covars_, learnt_model[meter].transmat_)
                
 new_learnt_models[meter] &#x3D; hmm.GaussianHMM(startprob.size, &quot;full&quot;)
            new_learnt_models[meter].startprob_ &#x3D; startprob
            new_learnt_models[meter].transmat_ &#x3D; transmat
            new_learnt_models[meter].means_ &#x3D; means
            new_learnt_models[meter].covars_ &#x3D; covars
            
 learnt_model_combined &#x3D; create_combined_hmm(new_learnt_models)
        self.individual &#x3D; new_learnt_models
        self.model &#x3D; learnt_model_combined

 for elec_meter, model in self.individual.items():
     means[elec_meter] &#x3D; (model.means_.round().astype(int).flatten().tolist())
     means[elec_meter].sort()
                    
                    
[decoded_states, decoded_power] &#x3D; decode_hmm(
    len(learnt_states), means, means.keys(), learnt_states)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<p>从文件siteonlyapi_tutorial.ipynb中发现：</p>
<pre class="line-numbers language-none"><code class="language-none">from nilmtk.api import API
api_results_experiment_1 &#x3D; API(experiment1)
df &#x3D; (api_results_experiment_1.pred_overall[&#39;CO&#39;])
df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.loli.net/2021/05/25/nrORzw1ycuk2bvZ.png" alt="image-20210525161820817"></p>
<p>然后查找api.py文件，搜索关键词“pred_overall”,发现：</p>
<p><img src="https://i.loli.net/2021/05/25/EQg3Hs4v7xZAMKe.png" alt="image-20210525162128147"></p>
<p>找到concat_pred_df是由pred_list转化而来，而pred_list：</p>
<pre class="line-numbers language-none"><code class="language-none">pred_list &#x3D; clf.disaggregate_chunk(test_elec)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>因此接着查询disaggregate_chunk：返回到文件fhmm_exact.py中存在这个函数</p>
<p>pred_list主要是由decode_hmm这个函数来计算的：</p>
<pre class="line-numbers language-none"><code class="language-none">[decoded_states, decoded_power] &#x3D; decode_hmm(
    len(learnt_states), means, means.keys(), learnt_states)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>其中的means是由self.individual这个参数传到的</p>
<pre class="line-numbers language-none"><code class="language-none">means&#x3D;model.means_------- from self.individual-----&gt;self.individual &#x3D; new_learnt_models<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">learnt_states <span class="token keyword">in</span> learnt_states_array
learnt_states_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>
temp <span class="token operator">=</span> test_mains<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
test_mains <span class="token keyword">in</span> test_mains_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">def disaggregate_chunk(self, test_mains_list)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>





<p>最后再温习一下<a href="https://github.com/pipette/Electricity-load-disaggregation/blob/master/code/run_model.py">here</a><br>and <a href="https://notebook.community/diegocavalca/Studies/phd-thesis/benchmarkings/am207-NILM-project-master/fhmm">here</a></p>
<p><a href="https://blog.csdn.net/wwb1990/article/details/103905371">安装教程</a></p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>english paper reading tools</title>
    <url>/mywiki.github.io/14732/</url>
    <content><![CDATA[<h1 id="english-paper-reading-tools"><a href="#english-paper-reading-tools" class="headerlink" title="english paper reading tools"></a>english paper reading tools</h1><ol>
<li><p><a href="http://www.pdfdo.com/pdf-to-html.aspx">在线PDF文档转换成html</a></p>
</li>
<li><p><a href="https://www.easepdf.com/cn/pdf-to-html/">在线免费转换PDF to html</a></p>
</li>
<li><p>最理想的免费在线<a href="https://www.aconvert.com/cn/pdf/pdf-to-html/">转换</a></p>
</li>
<li><p>上传到google云盘中，转换为doc，然后下载为html文件</p>
</li>
</ol>
<p><img src="https://i.loli.net/2021/05/21/AgeTIHMmtxNVzJb.png" alt="image-20210521181934139"></p>
<p>还有一种免费离线方法：</p>
<p>源文件<a href="https://github.com/coolwanglu/pdf2htmlEX/wiki/Building">地址</a></p>
<p>假如有一个PDF文件是test.pdf，只需要运行：</p>
<blockquote>
<p>pdf2htmlEX –zoom 1.3 pdf/test.pdf</p>
</blockquote>
<p>会<code>test.html</code>在<strong>当前目录中</strong>产生一个HTML文件。</p>
<p>如果输入：</p>
<blockquote>
<p>pdf2htmlEX -f 3 -l 5 –fit-width 1024 –bg-format jpg pdf/test.pdf</p>
</blockquote>
<p>就会只转换3~5页，并将页面调整为1024像素。背景图像将以JPEG格式生成。</p>
<p>windows安装<a href="https://gist.github.com/cnstar9988/3571c66b49050d98df92142dc19fbb00">说明</a></p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
1. 安装msys2-i686-20160205.exe，目标目录F:\msys32。
2. 修改F:\msys32\etc\pacman.d，配置msys2和mingw-w64镜像(一般用户请忽略本步骤)。
3. 升级基本环境。
   运行msys2_shell.bat
   
   更新本地包数据    
   pacman -Sy
    
   升级核心包
   pacman -S --needed filesystem msys2-runtime bash libreadline libiconv libarchive libgpgme libcurl pacman ncurses libintl
   之后需要关闭所有 MSYS2 shell，然后运行 autorebase.bat（这个是必须的，不能省略）
    
   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;确认重新运行msys2_shell.bat&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
   升级其他包
   pacman -Su
   如果后面提示关闭，则重新运行msys2_shell.bat，再次执行一次命令。
4. 安装编译环境。
   pacman -S base-devel
   pacman -S mingw-w64-i686-toolchain
5. 确认编译环境。
   关闭msys2_shell.bat，执行autorebase.bat，然后执行mingw32_shell.bat。
   gcc -v确认能看到gcc 5.3.0。

6. 安装相关lib包，这里可以检查pdf2html编译文档，看看需要哪些程序库。
   这里可以用pacman -Sl查看软件列表，对比程序库名称。
   pacman -S wget mingw-w64-i686-curl mingw-w64-i686-zlib mingw-w64-i686-libffi mingw-w64-i686-pkg-config  mingw-w64-i686-gettext
   pacman -S mingw-w64-i686-glib2 mingw-w64-i686-libpng mingw-w64-i686-libjpeg-turbo mingw-w64-i686-xz mingw-w64-i686-libtiff mingw-w64-i686-lcms2
   pacman -S mingw-w64-i686-libjpeg-turbo mingw-w64-i686-openjpeg mingw-w64-i686-freetype mingw-w64-i686-libxml2 mingw-w64-i686-fontconfig mingw-w64-i686-pixman
   pacman -S mingw-w64-i686-cairo  mingw-w64-i686-openssl mingw-w64-i686-libssh2 mingw-w64-i686-poppler mingw-w64-i686-poppler-data mingw-w64-i686-pango 
   pacman -S mingw-w64-i686-libtool mingw-w64-i686-cmake git
   pacman -S mingw-w64-i686-nspr mingw-w64-i686-nss

   
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正式编译&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
1. 将需要编译的软件放在F:\msys32\home\用户名，解压得到fontforge-20160404和pdf2htmlEX-0.14.6。
2. 编译fontforge-20160404.tar.gz。
   cd fontforge-20160404
   .&#x2F;bootstrap --force（运行成功，建议备份该目录，每次联网下载非常慢）
   .&#x2F;configure --prefix&#x3D;&#x2F;mingw32 --disable-python-extension --disable-python-scripting &amp;&amp; make &amp;&amp; make install
3. 编译pdf2htmlEX-0.14.6.tar.gz
   先修改一下CMakeLists.txt
   先找到代码set(PDF2HTMLEX_LIBS $&#123;PDF2HTMLEX_LIBS&#125; $&#123;FONTFORGE_LIBRARIES&#125;)
   在它之后添加
   # Add additional dependencies 
   set(PDF2HTMLEX_LIBS $&#123;PDF2HTMLEX_LIBS&#125; intl iconv gettextlib gettextpo gutils png jpeg openjpeg glib-2.0 z xml2 tiff gio-2.0 ltdl)
  
  修改CMakeLists.txt成功之后再执行编译命令。
  cd pdf2htmlEX-0.14.6
  mkdir build
  cd build
  cmake .. -G &quot;MSYS Makefiles&quot; -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;mingw32 -DENABLE_SVG&#x3D;ON
  make &amp;&amp; make install
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;验证和制作&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
  mingw下的data目录不一样，编译后无法直接运行，会报“Error: Cannot open the manifest file”。

  解决方法：将&#x2F;mingw32&#x2F;share&#x2F;pdf2htmlEX&#x2F;*.*复制到pdf2htmlEX.exe相同目录的data子目录。pdf2htmlEX代码不用改，里面已经处理过data和tmp目录。
  
  将&#x2F;mingw32&#x2F;bin的全部*.dll和pdf2htmlEX.exe，以及data一起组成安装包。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p><a href="https://pdf2doc.com/zh/">PDF2word</a></p>
]]></content>
      <categories>
        <category>tools</category>
        <category>paper</category>
      </categories>
      <tags>
        <tag>pdf</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>SVM模型应用</title>
    <url>/mywiki.github.io/56868/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/06/08/wEeUFjBsr4mNQyg.png" alt="image-20210608152757808"></p>
<p><img src="https://i.loli.net/2021/06/08/YEl7BAoPCwiXK8S.png" alt="image-20210608153019055"></p>
<p> Lai [4] used a hybrid SVM/GMM classifier that successfully achieved ubiquitous recognition service. In their model, GMM is employed to describe the distribution of the current measurement to find the power similarity, while SVM is applied to identify the appliances</p>
<p>用GMM寻找功率相似的目标设备，SVM用来辨识设备类型</p>
<p>但是SVM模型需要大量训练才会找到较好的核及相应的参数</p>
<p>如何使用python建立<a href="https://www.cnblogs.com/wj-1314/p/9436710.html">SVM模型</a></p>
<p>Conditional random fields (CRFs) have also been used by Panikos [12] as an unsupervised model for energy disaggregation 这个人用CRFs模型进行nilm分解</p>
<p> they only detect the on/off states of devices and cannot handle multistate appliances 只能辨识开关类设备，不能辨识多状态设备</p>
<p>使用电流信号和有功功率数据构建线性-chainCRF模型，</p>
<ul>
<li><p>submeter data of each load was used to create the probability density function for<br>each appliance to acquire the working state 首先对分表的功率构建概率密度分布函数，计算出当前的工作状态</p>
<ul>
<li><p>采用文献13对分表设备进行 概率密度求解，做为工作状态，采用稀疏HMM模型获取了较为理想的分解结果     </p>
<blockquote>
<p>文献13: 《Exploiting HMM Sparsity to Perform Online Real-Time Nonintrusive Load Monitoring》<strong>DOI:</strong> 10.1109/TSG.2015.2494592</p>
</blockquote>
</li>
</ul>
</li>
<li><p>基于智能电表数据对电器的状态进行分组标记和分割</p>
<ul>
<li>每分钟或每10分钟切一次，每个序列可以产生10~20个标记序列</li>
</ul>
</li>
<li><p>提取特征</p>
<ul>
<li><img src="https://i.loli.net/2021/06/08/tZpPoljy35CrVkA.png" alt="image-20210608161432748"></li>
<li><img src="https://i.loli.net/2021/06/08/f7YJ4uLPQHkDIFM.png" alt="image-20210608161524916"></li>
</ul>
</li>
<li><p>利用改进的迭代缩放算法对CRF模型进行训练</p>
</li>
<li><p>采用viterbi算法求解分解状态</p>
<ul>
<li><a href="https://towardsdatascience.com/conditional-random-field-tutorial-in-pytorch-ca0d04499463">https://towardsdatascience.com/conditional-random-field-tutorial-in-pytorch-ca0d04499463</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>NILM</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo安装与配置</title>
    <url>/mywiki.github.io/56415/</url>
    <content><![CDATA[<h3 id="hexo安装与配置"><a href="#hexo安装与配置" class="headerlink" title="hexo安装与配置"></a>hexo安装与配置</h3><p><a href="https://www.jianshu.com/p/09875c4a629c">click here</a>: 这里描述的很清晰，已验证，写的没错儿。</p>
<pre><code>下面是需要补充的一些内容：

1. 如果：
    $ ssh -T git@github.com
    git@github.com: Permission denied (publickey).

就输入
    $ ssh-keygen -t rsa -C &quot;mont2018a@gmail.com&quot;
    copy密码到目标网页

然后
    $ ssh -T git@github.com

2. 如果本地效果正常，远程时没有渲染效果，解决办法
     2.1 按F12检查问题
     2.2 发现没有生产CSS和JS等文件
     2.3 解决办法：
        更改一下_config.yml文件，其中的url和root属性。
            url: http://www.nideyuming.com/blog.github.io/
            root: /blog.github.io/


    hexo clean &amp;&amp; hexo g &amp;&amp; hexo d之前，先备份一下/public文件夹，保留可以回退版本的可能
</code></pre>
<h3 id="如何安装minima或者meadow主题"><a href="#如何安装minima或者meadow主题" class="headerlink" title="如何安装minima或者meadow主题"></a>如何安装minima或者meadow主题</h3><ol>
<li>下载  $ git clone <a href="https://github.com/adisaktijrs/hexo-theme-minima.git">https://github.com/adisaktijrs/hexo-theme-minima.git</a> themes/minima</li>
<li>修改配置文件的主题为minima 可参考 <a href="https://adisaktijrs.github.io/2020/10/11/Hexo-Minima-Theme-v1-0-Officially-Released/#Documentation">https://adisaktijrs.github.io/2020/10/11/Hexo-Minima-Theme-v1-0-Officially-Released/#Documentation</a></li>
<li>关于图片的设置  可参考 <a href="https://hexo.io/docs/asset-folders.html">https://hexo.io/docs/asset-folders.html</a> 和<a href="https://github.com/hexojs/hexo-renderer-marked">https://github.com/hexojs/hexo-renderer-marked</a><br>3.1 安装 npm install hexo-renderer-marked –save<br>3.2 hexo clean  hexo ge hexo s<br>3.3 hexo d</li>
</ol>
<blockquote>
<p>minima主题不理想，有些图片功能实现不了，转换成了meadow主题，很不错！</p>
</blockquote>
<h3 id="to-do-list"><a href="#to-do-list" class="headerlink" title="to do list"></a>to do list</h3><ul>
<li><p>明天学习一下<a href="http://cighao.com/2016/02/23/add-donate-to-hexo/">this</a></p>
</li>
<li><p>备份一下源代码</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>tech</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hmm模型</title>
    <url>/mywiki.github.io/26585/</url>
    <content><![CDATA[<p>from <a href="https://www.jianshu.com/p/c80ca0aa4213">here</a></p>
<p>介绍的非常清楚！</p>
<p>下面介绍一下具体使用方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 安装方式 http://baostock.com/baostock/index.php/%E9%A6%96%E9%A1%B5</span>
<span class="token keyword">import</span> baostock <span class="token keyword">as</span> bs
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> cm<span class="token punctuation">,</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> hmmlearn<span class="token punctuation">.</span>hmm <span class="token keyword">import</span> GaussianHMM


<span class="token comment">#### 登陆系统 ####</span>
lg <span class="token operator">=</span> bs<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 显示登陆返回信息</span>
<span class="token comment"># print('login respond error_code:'+lg.error_code)</span>
<span class="token comment"># print('login respond  error_msg:'+lg.error_msg)</span>

<span class="token comment">#### 获取沪深A股历史K线数据 ####</span>
<span class="token comment"># 详细指标参数，参见“历史行情指标参数”章节；“分钟线”参数与“日线”参数不同。“分钟线”不包含指数。</span>
<span class="token comment"># 分钟线指标：date,time,code,open,high,low,close,volume,amount,adjustflag</span>
<span class="token comment"># 周月线指标：date,code,open,high,low,close,volume,amount,adjustflag,turn,pctChg</span>
rs <span class="token operator">=</span> bs<span class="token punctuation">.</span>query_history_k_data_plus<span class="token punctuation">(</span><span class="token string">"sh.601668"</span><span class="token punctuation">,</span>
    <span class="token string">"date,code,open,high,low,close,preclose,volume,amount,adjustflag,turn,tradestatus,pctChg,isST"</span><span class="token punctuation">,</span>
    start_date<span class="token operator">=</span><span class="token string">'2015-05-01'</span><span class="token punctuation">,</span> end_date<span class="token operator">=</span><span class="token string">'2021-5-31'</span><span class="token punctuation">,</span>
    frequency<span class="token operator">=</span><span class="token string">"d"</span><span class="token punctuation">,</span> adjustflag<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">)</span>
<span class="token comment"># print('query_history_k_data_plus respond error_code:'+rs.error_code)</span>
<span class="token comment"># print('query_history_k_data_plus respond  error_msg:'+rs.error_msg)</span>

<span class="token comment">#### 打印结果集 ####</span>
data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span>error_code <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> rs<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取一条记录，将记录合并在一起</span>
    data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rs<span class="token punctuation">.</span>get_row_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span> columns<span class="token operator">=</span>rs<span class="token punctuation">.</span>fields<span class="token punctuation">)</span>

<span class="token comment">#### 结果集输出到csv文件 ####</span>
<span class="token comment"># result.to_csv("D:\\history_A_stock_k_data.csv", index=False)</span>
<span class="token comment"># print(result)</span>

<span class="token comment">#### 登出系统 ####</span>
bs<span class="token punctuation">.</span>logout<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">del</span><span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>lg<span class="token punctuation">,</span>rs<span class="token punctuation">)</span>


<span class="token comment">#数据处理</span>
<span class="token comment"># df = pd.read_excel("601668.SH.xlsx", header=0)</span>
df<span class="token operator">=</span>result
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始数据的大小："</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始数据的列名"</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token comment">#df.head</span>
df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">,</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token string">'high'</span><span class="token punctuation">,</span><span class="token string">'low'</span> <span class="token punctuation">,</span><span class="token string">'preclose'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">,</span> <span class="token string">'adjustflag'</span><span class="token punctuation">,</span><span class="token string">'turn'</span><span class="token punctuation">,</span><span class="token string">'tradestatus'</span><span class="token punctuation">,</span><span class="token string">'pctChg'</span><span class="token punctuation">,</span><span class="token string">'isST'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment">#df['date'] = df['date'].apply(datetime.datetime.toordinal)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
dates <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
close_v <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>
volume <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'volume'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>
diff <span class="token operator">=</span> np<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>close_v<span class="token punctuation">)</span>
<span class="token comment">#获得输入数据</span>
X <span class="token operator">=</span> np<span class="token punctuation">.</span>column_stack<span class="token punctuation">(</span><span class="token punctuation">[</span>diff<span class="token punctuation">,</span> volume<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">#print("输入数据的大小：", X.shape)   #(1504, 2)</span>
<span class="token comment"># float(d, base=10)</span>

<span class="token builtin">min</span> <span class="token operator">=</span> X<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token operator">*</span>X<span class="token punctuation">.</span>std<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#最小值</span>
<span class="token builtin">max</span> <span class="token operator">=</span> X<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span>X<span class="token punctuation">.</span>std<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">#最大值</span>
X <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
<span class="token comment">#异常值设为均值</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#dataframe的遍历</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token builtin">min</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            X<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment">#数据集的划分</span>
X_Test <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span>
X_Pre <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集的大小："</span><span class="token punctuation">,</span> X_Test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>     <span class="token comment">#(1474, 2)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集的大小："</span><span class="token punctuation">,</span> X_Pre<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment">#(30, 2)</span>
<span class="token comment">#模型的搭建</span>
<span class="token comment">#model = GaussianHMM(n_components=3, covariance_type='diag', n_iter=1000)</span>
<span class="token comment"># print("隐藏状态的个数", model.n_components)  #</span>
<span class="token comment"># print("均值矩阵")</span>
<span class="token comment"># print(model.means_)</span>
<span class="token comment"># print("协方差矩阵")</span>
<span class="token comment"># print(model.covars_)</span>
<span class="token comment"># print("状态转移矩阵--A")</span>
<span class="token comment"># print(model.transmat_)</span>

<span class="token comment">## 给定隐特征的数目</span>
n <span class="token operator">=</span> <span class="token number">3</span>
model <span class="token operator">=</span> GaussianHMM<span class="token punctuation">(</span>n_components<span class="token operator">=</span>n<span class="token punctuation">,</span> covariance_type<span class="token operator">=</span><span class="token string">'full'</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_Test<span class="token punctuation">)</span>
y <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_Test<span class="token punctuation">)</span> <span class="token comment"># 获取预测的概率</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_Test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取预测状态值</span>
<span class="token comment">#训练数据的隐藏状态划分</span>
hidden_states <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_Test<span class="token punctuation">)</span>


X_pic <span class="token operator">=</span> np<span class="token punctuation">.</span>column_stack<span class="token punctuation">(</span><span class="token punctuation">(</span>dates<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>toordinal<span class="token punctuation">)</span><span class="token punctuation">,</span> hidden_states<span class="token punctuation">,</span> X_Test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_Test<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 观测值</span>
X_pic<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>X_pic<span class="token punctuation">)</span>
X_pic<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dates<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
X_pic<span class="token punctuation">.</span>columns <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'hidden_states'</span><span class="token punctuation">,</span> <span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token string">'vol'</span><span class="token punctuation">]</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X_pic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>plot_date<span class="token punctuation">(</span>x<span class="token operator">=</span>X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>plot_date<span class="token punctuation">(</span>x<span class="token operator">=</span>X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'purple'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        plt<span class="token punctuation">.</span>plot_date<span class="token punctuation">(</span>x<span class="token operator">=</span>X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>X_pic<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

X_Test2<span class="token punctuation">,</span> hidden_states <span class="token operator">=</span> model<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X_Test<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># status = ['s1', 's2', 's3']</span>
<span class="token comment"># obs = ['设备1', '设备2','设备3']</span>
<span class="token comment">#</span>
<span class="token comment"># state2 = np.array([[0, 1, 0, 2, 1,1,2,2,2,0,0,1]]).T</span>
<span class="token comment"># logprob, sta_index = model.decode(state2, algorithm='viterbi')</span>
<span class="token comment">#</span>
<span class="token comment"># print("设备:", end="")</span>
<span class="token comment"># print(" ".join(map(lambda t: obs[t], [0, 1, 0, 2, 1,1,2,2,2,0,0,1])))</span>
<span class="token comment"># print("状态:", end="")</span>
<span class="token comment"># print(" ".join(map(lambda t: status[t], sta_index)))</span>
<span class="token comment"># print("概率值:", end="")</span>
<span class="token comment"># print(np.exp(logprob)) # 这个是因为在hmmlearn底层将概率进行了对数化，防止出现乘积为0的情况</span>


<span class="token comment">#print("协方差矩阵")</span>
<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl

t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">)</span>
mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">u'SimHei'</span><span class="token punctuation">]</span>
mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">231</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'涨跌幅'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">232</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> volume<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'交易量'</span><span class="token punctuation">)</span>

<span class="token comment"># 产生一个颜色</span>
clrs <span class="token operator">=</span> plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>terrain<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> clr <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>clrs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 画到一张图中</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> color<span class="token operator">=</span>clr<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'所有状态组'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 分开画</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> clr <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>clrs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> color<span class="token operator">=</span>clr<span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">u'状态组%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>suptitle<span class="token punctuation">(</span><span class="token string">u'SH601668股票：GaussianHMM分解隐变量'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>top<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>hmm</tag>
      </tags>
  </entry>
  <entry>
    <title>kaggle内核使用简介</title>
    <url>/mywiki.github.io/50029/</url>
    <content><![CDATA[<h1 id="使用kaggle内核的教程"><a href="#使用kaggle内核的教程" class="headerlink" title="使用kaggle内核的教程"></a>使用kaggle内核的教程</h1><p>###注册google账号登陆<br>###新建notebook</p>
<p><img src="https://img-blog.csdnimg.cn/20201201110318314.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20201201110700648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hKWjEx,size_16,color_FFFFFF,t_70"></p>
<p>###输入检查环境配置：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">!nvidia<span class="token operator">-</span>smi

!nvcc <span class="token operator">-</span>V

!gcc <span class="token operator">-</span><span class="token operator">-</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="编辑运行环境"><a href="#编辑运行环境" class="headerlink" title="编辑运行环境"></a>编辑运行环境</h3><p>点击右边settings，选择语言为python，加速器为GPU，需要下载依赖包时候选择internet</p>
<p><img src="C:/Users/zx-176/AppData/Roaming/Typora/typora-user-images/image-20210609111816258.png" alt="image-20210609111816258"></p>
<h3 id="python-code编辑和运行"><a href="#python-code编辑和运行" class="headerlink" title="python code编辑和运行"></a>python code编辑和运行</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Inspired by http://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html"""</span>
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> Adam
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

n_dice<span class="token operator">=</span><span class="token number">3</span>
n_states<span class="token operator">=</span>n_dice
ww<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_dice<span class="token punctuation">,</span> n_dice <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 均值为0的正态分布随机矩阵</span>
ww2<span class="token operator">=</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>ww<span class="token punctuation">)</span> <span class="token comment">## 使用nn.Parameter这个函数的目的也是想让某些变量在学习的过程中不断的修改其值以达到最优化;将一个不可训练的类型Tensor转换成可以训练的类型parameter并将这个parameter绑定到这个module里面(net.parameter()中就有这个绑定的parameter，所以在参数优化的时候可以进行优化的),net.parameter()是一个参数迭代器。</span>

transition<span class="token operator">=</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>ww2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment">#从分布为标准差0.1，均值-1中产生随机值填充到ww2的张量中</span>

_<span class="token punctuation">,</span>idx<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#torch.max(a,1)返回a张量中每一行中最大值的那个元素，且返回其索引</span>
idx<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">## 变换形状view(x,y,z),xyz是维度；将索引转化为数组并提取第1个数值</span>

idx<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># expand(原，行增，列增）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="如何安装第三方依赖包"><a href="#如何安装第三方依赖包" class="headerlink" title="如何安装第三方依赖包"></a>如何安装第三方依赖包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!pip install tf_crf_layer</span>

<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"../input/mydata"</span><span class="token punctuation">)</span> <span class="token comment"># 添加目标路径</span>
<span class="token keyword">import</span> conll2000
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="如何安装github上的依赖包"><a href="#如何安装github上的依赖包" class="headerlink" title="如何安装github上的依赖包"></a>如何安装github上的依赖包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">!pip install git<span class="token operator">+</span>https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>howl<span class="token operator">-</span>anderson<span class="token operator">/</span>tf_crf_layer<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="最多只能使用6个小时"><a href="#最多只能使用6个小时" class="headerlink" title="最多只能使用6个小时"></a>最多只能使用6个小时</h3><p><del>Kaggle只提供6小时的连续GPU使用时间</del></p>
<p>现在Kaggle提供的GPU为 P100,限制为，每周免费使用30小时</p>
<p>除了Kaggle，其实还有不少类似的平台；</p>
<p><a href="https://www.drivendata.org/">DrivenData</a></p>
<p><a href="https://www.crowdanalytix.com/community">CrowdANALYTIX</a></p>
<p><a href="https://www.innocentive.com/our-solvers/">InnoCentive</a></p>
<p><a href="https://towardsdatascience.com/top-competitive-data-science-platforms-other-than-kaggle-2995e9dad93c">TundIT</a></p>
<p><a href="https://competitions.codalab.org/">Codalab</a></p>
<p><a href="https://datahack.analyticsvidhya.com/">Analytics Vidhya</a></p>
<p><a href="https://www.crowdai.org/challenges">CrowdAI</a></p>
<p><a href="https://numer.ai/rounds">Numerai</a></p>
<p><a href="https://www.datasciencechallenge.org/">Data Science Challenge</a></p>
<p><a href="https://www.kdd.org/kdd2019/kdd-cup">KDD Cup</a></p>
<p><a href="https://tianchi.aliyun.com/competition/gameList/activeList">天池</a></p>
<p><a href="https://algo.qq.com/">腾讯广告算法大赛</a></p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>math learning</title>
    <url>/mywiki.github.io/46569/</url>
    <content><![CDATA[<h2 id="关于ICA算法"><a href="#关于ICA算法" class="headerlink" title="关于ICA算法"></a>关于ICA算法</h2><h3 id="什么是流形"><a href="#什么是流形" class="headerlink" title="什么是流形"></a>什么是流形</h3><p>直观上来讲，一个流形好比是一个d维的空间，在一个m维的空间中（m&gt;d）被扭曲之后的结果。需要注意的是流形不是一个形状，而是一个空间。举个例子，比如说一块布，可以把它看成一个二维的平面，这是一个二维的空间，现在我们把它扭一扭(三维空间),它就变成了一个流形，当然不扭的时候，它也是一个流形，欧氏空间是流形的一种特殊情况。<br><a href="https://yifdu.github.io/2018/11/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/manifold_1.png"><img src="https://yifdu.github.io/2018/11/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B5%81%E5%BD%A2%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/manifold_1.png" alt="manifold_1"></a></p>
<p>三维上的一个空间，但三维的坐标只有两个变量，就是说它的自由度是2，就正好对应了它是一个2维流形。</p>
<p>流形具有在局部和欧氏空间同胚的空间，也就是局部具有欧氏空间的性质，能用欧式距离来进行距离计算。这就给降维带来了很大的启发，若低维流形嵌入到了高维空间，此时样本在高维空间的分布虽然复杂，但在局部上仍具有欧氏空间的性质，因此可以在局部建立降维映射关系。然后再设法将局部映射推广到全局。</p>
<p>对于“从北京到上海”的距离这件事，我们关注的是把三维地球展开成二维空间，然后测量地表距离，而不是三维空间中的球面上两点的欧氏距离。</p>
<h3 id="fisher矩阵"><a href="#fisher矩阵" class="headerlink" title="fisher矩阵"></a>fisher矩阵</h3><p>特定参数约束条件下目标样本增量变化的联合概率</p>
<p><img src="https://i.loli.net/2021/05/21/vSHEJknlb4yR2AF.png" alt="image-20210521153355919"></p>
<p>对右边取梯度并令梯度为零，可得：</p>
<p><img src="https://www.zhihu.com/equation?tex=%5Cdelta%5Ctheta%5E*+=+-%5Cfrac%7B1%7D%7B%5Clambda%7DF%5E%7B-1%7D%5Cnabla_%7B%5Ctheta%7D+L(%5Ctheta)" alt="[公式]"></p>
<p><img src="https://i.loli.net/2021/05/21/kfMNePDJzuRc34B.png" alt="image-20210521153253657"></p>
<p>增量变化为0</p>
<p>KL-散度衡量了两个概率分布之间的差异，Fisher信息矩阵（FIM）是KL-散度的二阶近似，实际定义了概率分布空间上局部曲率。由于Fisher矩阵表示统计流形（概率分布空间）上的局部曲率，因此这个方向实际考虑了分布参数空间上的曲率信息。</p>
<p>Fisher矩阵是对数似然函数的Hessian矩阵的期望：</p>
<p><img src="https://www.zhihu.com/equation?tex=F=+++-E_%7Bp(x%7C%5Ctheta)%7D+%5Cleft%5B%5Cfrac%7B%5Cpartial+%5E2+%7D%7B%5Cpartial+%5Ctheta+%5Cpartial+%5Ctheta%5ET%7D+%5Clog+p(x%7C%5Ctheta)++%5Cright%5D+" alt="[公式]"></p>
<p>最速下降方向由feisher矩阵确定</p>
<p><img src="https://i.loli.net/2021/05/21/v512JxDNpkyeKPA.png" alt="image-20210521154003352"></p>
<p><img src="https://i.loli.net/2021/05/21/HcTFqYeOMypmsg4.png" alt="image-20210521154046880"></p>
<p><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tonga.pdf">https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tonga.pdf</a></p>
<h3 id="hessian矩阵是二阶矩矩阵"><a href="#hessian矩阵是二阶矩矩阵" class="headerlink" title="hessian矩阵是二阶矩矩阵"></a>hessian矩阵是二阶矩矩阵</h3><p><img src="https://i.loli.net/2021/05/21/n6xVyH87ETbMp4f.png" alt="image-20210521154811350"></p>
<p><img src="https://i.loli.net/2021/05/21/Fm1BOn4ylvqeP8r.png" alt="image-20210521155009717"></p>
<p><img src="https://i.loli.net/2021/05/21/YwzoRKdriPXAGhJ.png" alt="image-20210521155032737"></p>
<p><img src="https://i.loli.net/2021/05/21/YwzoRKdriPXAGhJ.png"></p>
<p><img src="https://i.loli.net/2021/05/21/bRWvFBunjYCM1pZ.png" alt="image-20210521162145123"></p>
<h3 id="矩阵函数微分"><a href="#矩阵函数微分" class="headerlink" title="矩阵函数微分"></a>矩阵函数微分</h3><p>以实矩阵为变元的实函数（梯度矩阵等于Jacobian矩阵的转置）</p>
<p>一阶实矩阵微分是辨识实矩阵函数的梯度矩阵、Jacobian矩阵的有效数学工具；</p>
<p>二阶实矩阵微分是辨识实矩阵函数的Hessian矩阵(二阶偏导矩阵)的有效数学工具；</p>
<p>一阶复矩阵微分可以标识梯度矩阵与共轭梯度矩阵，Jacobian矩阵与共轭Jacobian矩阵；二阶复矩阵微分可以标识复Hessian矩阵</p>
<h3 id="为什么Fisher-Information-Matrix和负的Hessian-of-log-likelihood是相等？"><a href="#为什么Fisher-Information-Matrix和负的Hessian-of-log-likelihood是相等？" class="headerlink" title="为什么Fisher Information Matrix和负的Hessian of log likelihood是相等？"></a>为什么Fisher Information Matrix和负的Hessian of log likelihood是相等？</h3><p>参考<a href="http://mark.reid.name/blog/fisher-information-and-log-likelihood.html">here</a></p>
<p><img src="https://i.loli.net/2021/05/21/jCTBbJSEDxNziZn.png" alt="image-20210521160630896"></p>
<p>p=与参数$theta$ 相关的基于X的概率分布</p>
<p>D=偏导数</p>
<p>fisher信息矩阵是对称且半正定矩阵，可以认为可衡量出对数似然函数是否位于目标参数附近区域的敏感度。</p>
<p>After much head-scratching（经过反复摸索）， </p>
<p><img src="https://i.loli.net/2021/05/21/MVXd6iDPaUJToyN.png" alt="image-20210521161544438"></p>
<p>因此，上面非常清晰地证明了Fisher Information Matrix和负的Hessian of log likelihood是相等的。</p>
<p>高斯分布假设下，maximum likelihood的等效结果是minimize negative log likelihood（根据高斯分布的概率密度函数可以看出）。同时注意到，negative log likelihood的二阶导数（也就是其Hessian），正好是协方差的逆，也就是说此Hessian of Negative Log Likelihood即Inverse of Covariance Matrix。</p>
<h3 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h3><p><img src="https://i.loli.net/2021/05/21/Sl3xBd9LJHbgYpK.png" alt="image-20210521163419312"></p>
<p><img src="https://i.loli.net/2021/05/21/FaufgZreOKPI75Q.png" alt="image-20210521163433501"></p>
<p> f(x)=X’AX 为二次型的矩形形式</p>
<p>实对称矩阵A的秩称为:二次型的秩。</p>
<p><img src="https://i.loli.net/2021/05/21/YZV82HyobqMetNr.png" alt="image-20210521163614919"></p>
<p>假设A矩阵为正定矩阵且对称，则所有特征值≥0;</p>
<p>协方差矩阵是半正定矩阵。</p>
<h3 id="EM算法"><a href="#EM算法" class="headerlink" title="EM算法"></a>EM算法</h3><p><a href="https://blog.csdn.net/jinping_shi/article/details/59613054">EM算法</a>（Expectation-Maximization algorithm）分两步，第一步先求出要估计参数的粗略值，第二步使用第一步的值计算最大化似然函数。</p>
<p><img src="https://i.loli.net/2021/05/21/SiVWc8H2nGPehRJ.png" alt="image-20210521170103595"></p>
<p><img src="https://i.loli.net/2021/05/21/SiVWc8H2nGPehRJ.png"></p>
<p><img src="https://i.loli.net/2021/05/21/oyendCXJU2qrNpj.png" alt="image-20210521170204861"></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>math</category>
      </categories>
      <tags>
        <tag>自然梯度</tag>
        <tag>KL-散度</tag>
      </tags>
  </entry>
  <entry>
    <title>nilm_AFHMM算法代码改造</title>
    <url>/mywiki.github.io/46953/</url>
    <content><![CDATA[<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>FHMM模型占用内存空间太大，因此这里选取了4个潜在目标设备进行分解，后续需要优化如何选择潜在目标 设备</li>
<li>FHMM模型的训练数据集的预测时间窗口不能太长，超过3000个样本点就容易出问题</li>
<li>各个设备的状态数目需要优化策略，最好按照设备电机类型等物理属性进行预分类</li>
</ol>
<h3 id="下面是详细代码"><a href="#下面是详细代码" class="headerlink" title="下面是详细代码"></a>下面是详细代码</h3><p>数据集是基于REDD数据集中的低频数据进行实现的，选择单个用户的居住地进行NILM分解。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertools
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token comment">#import datetime</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> hmmlearn <span class="token keyword">import</span> hmm
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
<span class="token keyword">import</span> os

<span class="token comment"># path = "E:/ccc/data/pythonProject/venv/nilm_data_house6/"</span>
path <span class="token operator">=</span> <span class="token string">"./nilm_data_house6/"</span>
tz <span class="token operator">=</span> <span class="token string">'US/Eastern'</span>


<span class="token keyword">def</span> <span class="token function">_load_csv</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> tz<span class="token punctuation">,</span> drop_duplicates<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sort_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Load data</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> names<span class="token operator">=</span>columns<span class="token punctuation">,</span>
                     dtype<span class="token operator">=</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">:</span> np<span class="token punctuation">.</span>float32 <span class="token keyword">for</span> m <span class="token keyword">in</span> columns<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment"># Convert the integer index column to timezone-aware datetime</span>
    df<span class="token punctuation">.</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>values<span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">,</span> utc<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    df <span class="token operator">=</span> df<span class="token punctuation">.</span>tz_convert<span class="token punctuation">(</span>tz<span class="token punctuation">)</span>

    <span class="token keyword">if</span> sort_index<span class="token punctuation">:</span>
        df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># raw REDD data isn't always sorted</span>

    <span class="token keyword">if</span> drop_duplicates<span class="token punctuation">:</span>
        dups_in_index <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> dups_in_index<span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token operator">~</span>dups_in_index<span class="token punctuation">]</span>

    <span class="token keyword">return</span> df


<span class="token keyword">def</span> <span class="token function">load_dat</span><span class="token punctuation">(</span>key_obj<span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">:</span>
    filename <span class="token operator">=</span> <span class="token string">'channel_&#123;:d&#125;.dat'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key_obj<span class="token punctuation">)</span>
    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
    hg <span class="token operator">=</span> _load_csv<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> column<span class="token punctuation">,</span> tz<span class="token punctuation">)</span>
    <span class="token keyword">return</span> hg


<span class="token keyword">def</span> <span class="token function">_transform_data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    MAX_NUMBER_OF_SAMPLES <span class="token operator">=</span> <span class="token number">2000</span>
    MIN_NUMBER_OF_SAMPLES <span class="token operator">=</span> <span class="token number">20</span>
    DATA_THRESHOLD <span class="token operator">=</span> <span class="token number">10</span>

    data_above_thresh <span class="token operator">=</span> data<span class="token punctuation">[</span>data <span class="token operator">></span> DATA_THRESHOLD<span class="token punctuation">]</span><span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
    n_samples <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_above_thresh<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n_samples <span class="token operator">&lt;</span> MIN_NUMBER_OF_SAMPLES<span class="token punctuation">:</span>
        <span class="token keyword">return</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>MAX_NUMBER_OF_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> n_samples <span class="token operator">></span> MAX_NUMBER_OF_SAMPLES<span class="token punctuation">:</span>
        <span class="token comment"># Randomly subsample (we don't want to smoothly downsample</span>
        <span class="token comment"># because that is likely to change the values)</span>
        random_indices <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n_samples<span class="token punctuation">,</span> MAX_NUMBER_OF_SAMPLES<span class="token punctuation">)</span>
        resampled <span class="token operator">=</span> data_above_thresh<span class="token punctuation">[</span>random_indices<span class="token punctuation">]</span>
        <span class="token keyword">return</span> resampled<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>MAX_NUMBER_OF_SAMPLES<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data_above_thresh<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n_samples<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">_apply_clustering_n_clusters</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> n_clusters<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans
    k_means <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>init<span class="token operator">=</span><span class="token string">'k-means++'</span><span class="token punctuation">,</span> n_clusters<span class="token operator">=</span>n_clusters<span class="token punctuation">)</span>
    k_means<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
    <span class="token keyword">return</span> k_means<span class="token punctuation">.</span>labels_<span class="token punctuation">,</span> k_means<span class="token punctuation">.</span>cluster_centers_


<span class="token keyword">def</span> <span class="token function">_apply_clustering</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> max_num_clusters<span class="token punctuation">,</span> exact_num_clusters<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metrics

    <span class="token comment"># Finds whether 2 or 3 gives better Silhouellete coefficient</span>
    <span class="token comment"># Whichever is higher serves as the number of clusters for that</span>
    <span class="token comment"># appliance</span>
    num_clus <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    sh <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    k_means_labels <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    k_means_cluster_centers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    k_means_labels_unique <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment"># If the exact number of clusters are specified, then use that</span>
    <span class="token keyword">if</span> exact_num_clusters <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        labels<span class="token punctuation">,</span> centers <span class="token operator">=</span> _apply_clustering_n_clusters<span class="token punctuation">(</span>X<span class="token punctuation">,</span> exact_num_clusters<span class="token punctuation">)</span>
        <span class="token keyword">return</span> centers<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Exact number of clusters are not specified, use the cluster validity measures</span>
    <span class="token comment"># to find the optimal number</span>
    <span class="token keyword">for</span> n_clusters <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> max_num_clusters<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            labels<span class="token punctuation">,</span> centers <span class="token operator">=</span> _apply_clustering_n_clusters<span class="token punctuation">(</span>X<span class="token punctuation">,</span> n_clusters<span class="token punctuation">)</span>
            k_means_labels<span class="token punctuation">[</span>n_clusters<span class="token punctuation">]</span> <span class="token operator">=</span> labels
            k_means_cluster_centers<span class="token punctuation">[</span>n_clusters<span class="token punctuation">]</span> <span class="token operator">=</span> centers
            k_means_labels_unique<span class="token punctuation">[</span>n_clusters<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                sh_n <span class="token operator">=</span> metrics<span class="token punctuation">.</span>silhouette_score<span class="token punctuation">(</span>
                    X<span class="token punctuation">,</span> k_means_labels<span class="token punctuation">[</span>n_clusters<span class="token punctuation">]</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">'euclidean'</span><span class="token punctuation">)</span>

                <span class="token keyword">if</span> sh_n <span class="token operator">></span> sh<span class="token punctuation">:</span>
                    sh <span class="token operator">=</span> sh_n
                    num_clus <span class="token operator">=</span> n_clusters
            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
                num_clus <span class="token operator">=</span> n_clusters
        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
            <span class="token keyword">if</span> num_clus <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> k_means_cluster_centers<span class="token punctuation">[</span>num_clus<span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> k_means_cluster_centers<span class="token punctuation">[</span>num_clus<span class="token punctuation">]</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">cluster</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> max_num_clusters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> exact_num_clusters<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Find where power consumption is greater than 10</span>
    data <span class="token operator">=</span> _transform_data<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
    <span class="token comment"># Find clusters</span>
    centroids <span class="token operator">=</span> _apply_clustering<span class="token punctuation">(</span>data<span class="token punctuation">,</span> max_num_clusters<span class="token punctuation">,</span> exact_num_clusters<span class="token punctuation">)</span>
    centroids <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>centroids<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># add 'off' state</span>
    centroids <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>centroids<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
    centroids <span class="token operator">=</span> np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>centroids<span class="token punctuation">)</span>  <span class="token comment"># np.unique also sorts</span>
    <span class="token comment"># TODO: Merge similar clusters</span>
    <span class="token keyword">return</span> centroids


<span class="token keyword">def</span> <span class="token function">sort_startprob</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> startprob<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">""" Sort the startprob according to power means; as returned by mapping
    """</span>
    num_elements <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>startprob<span class="token punctuation">)</span>
    new_startprob <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_elements<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>startprob<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        new_startprob<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> startprob<span class="token punctuation">[</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> new_startprob


<span class="token keyword">def</span> <span class="token function">sort_covars</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> covars<span class="token punctuation">)</span><span class="token punctuation">:</span>
    new_covars <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>covars<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>covars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        new_covars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> covars<span class="token punctuation">[</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> new_covars


<span class="token keyword">def</span> <span class="token function">sort_transition_matrix</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    num_elements <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
    A_new <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>num_elements<span class="token punctuation">,</span> num_elements<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_elements<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_elements<span class="token punctuation">)</span><span class="token punctuation">:</span>
            A_new<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mapping<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> A_new


<span class="token keyword">def</span> <span class="token function">sort_learnt_parameters</span><span class="token punctuation">(</span>startprob<span class="token punctuation">,</span> means<span class="token punctuation">,</span> covars<span class="token punctuation">,</span> transmat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    mapping <span class="token operator">=</span> return_sorting_mapping<span class="token punctuation">(</span>means<span class="token punctuation">)</span>
    means_new <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>means<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    startprob_new <span class="token operator">=</span> sort_startprob<span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> startprob<span class="token punctuation">)</span>
    covars_new <span class="token operator">=</span> sort_covars<span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> covars<span class="token punctuation">)</span>
    transmat_new <span class="token operator">=</span> sort_transition_matrix<span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> transmat<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>means_new<span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>means<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>startprob_new<span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>startprob<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>transmat_new<span class="token punctuation">)</span> <span class="token operator">==</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>transmat<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>startprob_new<span class="token punctuation">,</span> means_new<span class="token punctuation">,</span> covars_new<span class="token punctuation">,</span> transmat_new<span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">compute_A_fhmm</span><span class="token punctuation">(</span>list_A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> list_A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list_A<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> np<span class="token punctuation">.</span>kron<span class="token punctuation">(</span>result<span class="token punctuation">,</span> list_A<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result


<span class="token keyword">def</span> <span class="token function">compute_means_fhmm</span><span class="token punctuation">(</span>list_means<span class="token punctuation">)</span><span class="token punctuation">:</span>
    states_combination <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token operator">*</span>list_means<span class="token punctuation">)</span><span class="token punctuation">)</span>
    num_combinations <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>states_combination<span class="token punctuation">)</span>
    means_stacked <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> states_combination<span class="token punctuation">]</span><span class="token punctuation">)</span>
    means <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>means_stacked<span class="token punctuation">,</span> <span class="token punctuation">(</span>num_combinations<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cov <span class="token operator">=</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_combinations<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>means<span class="token punctuation">,</span> cov<span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">compute_pi_fhmm</span><span class="token punctuation">(</span>list_pi<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> list_pi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list_pi<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> np<span class="token punctuation">.</span>kron<span class="token punctuation">(</span>result<span class="token punctuation">,</span> list_pi<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result


<span class="token keyword">def</span> <span class="token function">create_combined_hmm</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    list_pi <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">.</span>startprob_ <span class="token keyword">for</span> appliance <span class="token keyword">in</span> model<span class="token punctuation">]</span>
    list_A <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">.</span>transmat_ <span class="token keyword">for</span> appliance <span class="token keyword">in</span> model<span class="token punctuation">]</span>
    list_means <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">.</span>means_<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
                  <span class="token keyword">for</span> appliance <span class="token keyword">in</span> model<span class="token punctuation">]</span>

    pi_combined <span class="token operator">=</span> compute_pi_fhmm<span class="token punctuation">(</span>list_pi<span class="token punctuation">)</span>
    A_combined <span class="token operator">=</span> compute_A_fhmm<span class="token punctuation">(</span>list_A<span class="token punctuation">)</span>
    <span class="token punctuation">[</span>mean_combined<span class="token punctuation">,</span> cov_combined<span class="token punctuation">]</span> <span class="token operator">=</span> compute_means_fhmm<span class="token punctuation">(</span>list_means<span class="token punctuation">)</span>

    combined_model <span class="token operator">=</span> hmm<span class="token punctuation">.</span>GaussianHMM<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>pi_combined<span class="token punctuation">)</span><span class="token punctuation">,</span> covariance_type<span class="token operator">=</span><span class="token string">'full'</span><span class="token punctuation">)</span>
    combined_model<span class="token punctuation">.</span>startprob_ <span class="token operator">=</span> pi_combined
    combined_model<span class="token punctuation">.</span>transmat_ <span class="token operator">=</span> A_combined
    combined_model<span class="token punctuation">.</span>covars_ <span class="token operator">=</span> cov_combined
    combined_model<span class="token punctuation">.</span>means_ <span class="token operator">=</span> mean_combined

    <span class="token keyword">return</span> combined_model


<span class="token keyword">def</span> <span class="token function">return_sorting_mapping</span><span class="token punctuation">(</span>means<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> copy <span class="token keyword">import</span> deepcopy
    means_copy <span class="token operator">=</span> deepcopy<span class="token punctuation">(</span>means<span class="token punctuation">)</span>
    means_copy <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>means_copy<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token comment"># Finding mapping</span>
    mapping <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>means_copy<span class="token punctuation">)</span><span class="token punctuation">:</span>
        mapping<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>val <span class="token operator">==</span> means<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> mapping


<span class="token keyword">def</span> <span class="token function">decode_hmm</span><span class="token punctuation">(</span>length_sequence<span class="token punctuation">,</span> centroids<span class="token punctuation">,</span> appliance_list<span class="token punctuation">,</span> states<span class="token punctuation">)</span><span class="token punctuation">:</span>
    hmm_states <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    hmm_power <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    total_num_combinations <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">for</span> appliance <span class="token keyword">in</span> appliance_list<span class="token punctuation">:</span>
        total_num_combinations <span class="token operator">*=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>centroids<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> appliance <span class="token keyword">in</span> appliance_list<span class="token punctuation">:</span>
        hmm_states<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>length_sequence<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span>
        hmm_power<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>length_sequence<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length_sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>

        factor <span class="token operator">=</span> total_num_combinations
        <span class="token keyword">for</span> appliance <span class="token keyword">in</span> appliance_list<span class="token punctuation">:</span>
            <span class="token comment"># assuming integer division (will cause errors in Python 3x)</span>
            factor <span class="token operator">=</span> factor <span class="token operator">//</span> <span class="token builtin">len</span><span class="token punctuation">(</span>centroids<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">)</span>

            temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>states<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> factor
            hmm_states<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>centroids<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">)</span>
            hmm_power<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> centroids<span class="token punctuation">[</span>
                appliance<span class="token punctuation">]</span><span class="token punctuation">[</span>hmm_states<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>hmm_states<span class="token punctuation">,</span> hmm_power<span class="token punctuation">]</span>

<span class="token comment">###########################################</span>
<span class="token comment">## read lables 设备名称标签的读取</span>
<span class="token comment">###########################################</span>
mm <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        data1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
data_labels <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> <span class="token punctuation">(</span>mm<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> f<span class="token punctuation">,</span> line<span class="token punctuation">)</span>

<span class="token comment">###########################################</span>
<span class="token comment">## read meter readings</span>
<span class="token comment">###########################################</span>
elec <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ggg <span class="token operator">=</span> load_dat<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'power'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    elec<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>data_labels<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data_labels<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ggg
<span class="token keyword">del</span> ggg<span class="token punctuation">,</span> i<span class="token punctuation">,</span> data_labels

<span class="token comment">## 组合总表数据</span>
<span class="token comment">#train_main = elec['mains0'].append(elec['mains1'])</span>
<span class="token comment">###########################################</span>
<span class="token comment"># TODO: 训练、测试数据集的时间窗口设定</span>
<span class="token comment">###########################################</span>
train_main <span class="token operator">=</span> elec<span class="token punctuation">[</span><span class="token string">'mains0'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
test_mains<span class="token operator">=</span>elec<span class="token punctuation">[</span><span class="token string">'mains1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> elec<span class="token punctuation">[</span><span class="token string">'mains0'</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> elec<span class="token punctuation">[</span><span class="token string">'mains1'</span><span class="token punctuation">]</span>

<span class="token comment">## 组合分表数据读数</span>
app_name_all <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> elec<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>


<span class="token comment">###########################################</span>
<span class="token comment"># TODO: 选择潜在目标候选集中所包含的电器设备</span>
<span class="token comment">###########################################</span>
app_name<span class="token operator">=</span><span class="token punctuation">[</span>app_name_all<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

train_app_tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> app_num<span class="token punctuation">,</span> df_list <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>elec<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> app_name_all<span class="token punctuation">[</span>app_num<span class="token punctuation">]</span> <span class="token keyword">in</span> app_name<span class="token punctuation">:</span>
        df_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df_list<span class="token punctuation">)</span>  <span class="token comment"># 合成一个长表，前面是设备名称，后面是设备数据</span>
        train_app_tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>app_name_all<span class="token punctuation">[</span>app_num<span class="token punctuation">]</span><span class="token punctuation">,</span> df_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> elec<span class="token punctuation">,</span>df_list<span class="token punctuation">,</span>app_num<span class="token punctuation">,</span>app_name<span class="token punctuation">,</span>app_name_all

train_appliances <span class="token operator">=</span> train_app_tmp
<span class="token keyword">del</span> train_app_tmp

<span class="token comment">## 构造和训练FHMM模型</span>
learnt_model <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>
num_meters <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_appliances<span class="token punctuation">)</span>

<span class="token comment">###########################################</span>
<span class="token comment"># TODO: 对各个设备的状态数据分别进行无监督聚类分析，寻找最佳状态数量</span>
<span class="token comment">###########################################</span>
<span class="token keyword">if</span> num_meters <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">:</span>
    max_num_clusters <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    max_num_clusters <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">del</span> num_meters
<span class="token keyword">for</span> appliance<span class="token punctuation">,</span> meter <span class="token keyword">in</span> train_appliances<span class="token punctuation">:</span>
    meter_data <span class="token operator">=</span> meter<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>
    X <span class="token operator">=</span> meter_data<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> X<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">2</span>
    states <span class="token operator">=</span> cluster<span class="token punctuation">(</span>meter_data<span class="token punctuation">,</span> max_num_clusters<span class="token punctuation">)</span>
    num_total_states <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Training model for submeter '&#123;&#125;'"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>appliance<span class="token punctuation">)</span><span class="token punctuation">)</span>
    learnt_model<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span> <span class="token operator">=</span> hmm<span class="token punctuation">.</span>GaussianHMM<span class="token punctuation">(</span>num_total_states<span class="token punctuation">,</span> <span class="token string">"full"</span><span class="token punctuation">)</span>
    <span class="token comment"># Fit</span>
    learnt_model<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Learnt model for : "</span> <span class="token operator">+</span> appliance<span class="token punctuation">)</span>
<span class="token keyword">del</span> X<span class="token punctuation">,</span>appliance<span class="token punctuation">,</span>num_total_states<span class="token punctuation">,</span>states<span class="token punctuation">,</span>meter_data<span class="token punctuation">,</span>max_num_clusters<span class="token punctuation">,</span>train_appliances
<span class="token comment"># Combining to make a AFHMM</span>
new_learnt_models <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> meter <span class="token keyword">in</span> learnt_model<span class="token punctuation">:</span>
    startprob<span class="token punctuation">,</span> means<span class="token punctuation">,</span> covars<span class="token punctuation">,</span> transmat <span class="token operator">=</span> sort_learnt_parameters<span class="token punctuation">(</span>
        learnt_model<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>startprob_<span class="token punctuation">,</span> learnt_model<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>means_<span class="token punctuation">,</span>
        learnt_model<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>covars_<span class="token punctuation">,</span> learnt_model<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>transmat_<span class="token punctuation">)</span>

    new_learnt_models<span class="token punctuation">[</span>meter<span class="token punctuation">]</span> <span class="token operator">=</span> hmm<span class="token punctuation">.</span>GaussianHMM<span class="token punctuation">(</span>startprob<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token string">"full"</span><span class="token punctuation">)</span>
    new_learnt_models<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>startprob_ <span class="token operator">=</span> startprob
    new_learnt_models<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>transmat_ <span class="token operator">=</span> transmat
    new_learnt_models<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>means_ <span class="token operator">=</span> means
    new_learnt_models<span class="token punctuation">[</span>meter<span class="token punctuation">]</span><span class="token punctuation">.</span>covars_ <span class="token operator">=</span> covars

<span class="token keyword">del</span> learnt_model<span class="token punctuation">,</span> meter<span class="token punctuation">,</span>transmat<span class="token punctuation">,</span>startprob<span class="token punctuation">,</span>means<span class="token punctuation">,</span>covars
individual <span class="token operator">=</span> new_learnt_models
model <span class="token operator">=</span> create_combined_hmm<span class="token punctuation">(</span>new_learnt_models<span class="token punctuation">)</span>
<span class="token keyword">del</span> new_learnt_models
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"print ..........."</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FHMM partial_fit end................."</span><span class="token punctuation">)</span>


<span class="token comment">## 评估模型效果</span>
<span class="token comment">#test_mains=test_main</span>
learnt_states_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
test_mains <span class="token operator">=</span> test_mains<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>
temp <span class="token operator">=</span> test_mains<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_mains<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
m_p<span class="token operator">=</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
learnt_states_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m_p<span class="token punctuation">)</span>
<span class="token keyword">del</span> m_p<span class="token punctuation">,</span>temp

<span class="token comment"># Model</span>
means <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> elec_meter<span class="token punctuation">,</span> model <span class="token keyword">in</span> individual<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    means<span class="token punctuation">[</span>elec_meter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>means_<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    means<span class="token punctuation">[</span>elec_meter<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> individual<span class="token punctuation">,</span>elec_meter

decoded_power_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
decoded_states_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> learnt_states <span class="token keyword">in</span> learnt_states_array<span class="token punctuation">:</span>
    <span class="token punctuation">[</span>decoded_states<span class="token punctuation">,</span> decoded_power<span class="token punctuation">]</span> <span class="token operator">=</span> decode_hmm<span class="token punctuation">(</span>
        <span class="token builtin">len</span><span class="token punctuation">(</span>learnt_states<span class="token punctuation">)</span><span class="token punctuation">,</span> means<span class="token punctuation">,</span> means<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> learnt_states<span class="token punctuation">)</span>
    decoded_states_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>decoded_states<span class="token punctuation">)</span>
    decoded_power_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>decoded_power<span class="token punctuation">)</span>

<span class="token keyword">del</span> means<span class="token punctuation">,</span>decoded_states<span class="token punctuation">,</span>decoded_power<span class="token punctuation">,</span>learnt_states<span class="token punctuation">,</span>learnt_states_array

prediction <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>
    decoded_power_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span>test_mains<span class="token punctuation">.</span>index<span class="token punctuation">)</span>

out_df<span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>test_mains<span class="token punctuation">,</span>prediction<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
out_df<span class="token punctuation">[</span><span class="token string">'pred'</span><span class="token punctuation">]</span><span class="token operator">=</span>out_df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">del</span> prediction<span class="token punctuation">,</span>decoded_power_array<span class="token punctuation">,</span>decoded_states_array

out_df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Pred"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Disaggregated Data by AFHMM within 24 hours by sample of 1HZ'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## 只比较原始功率曲线和预测曲线</span>
out_df2<span class="token operator">=</span>out_df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
out_df2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Pred"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Disaggregated Data by AFHMM within 24 hours by sample of 1HZ'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># fff=out_df.to_csv('out.csv')</span>
<span class="token comment"># print(fff)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finished disaggregated data! "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://i.loli.net/2021/06/04/SIVdp3WaxHUAysB.png" alt="image-20210604180121411"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>hmm</tag>
        <tag>FHMM算法</tag>
        <tag>自动聚类</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm的应用小技巧</title>
    <url>/mywiki.github.io/22655/</url>
    <content><![CDATA[<h3 id="pycharm-上在远程服务器上安装第三方依赖包"><a href="#pycharm-上在远程服务器上安装第三方依赖包" class="headerlink" title="pycharm 上在远程服务器上安装第三方依赖包"></a>pycharm 上在远程服务器上安装第三方依赖包</h3><p>setting中的解释器部署为远程服务器地址</p>
<p>然后在tools部署配置中设置为：</p>
<p><img src="https://i.loli.net/2021/06/10/jmGiZRpESCrzBI1.png" alt="image-20210610184550599"></p>
<p>其中部署路径的地址是服务器上面的虚拟环境地址</p>
<p>然后回到setting中：</p>
<p><img src="https://i.loli.net/2021/06/10/j5SBly1IZTNrVpW.png" alt="image-20210610184930077"></p>
<p>部署完成，开始安装第三方依赖包：</p>
<p><img src="https://i.loli.net/2021/06/10/Pa9ZqQreL4YCnb6.png" alt="image-20210610184356892"></p>
<h3 id="Pycharm配置远程linux环境Can’t-get-remote-credentials-for-deployment-server"><a href="#Pycharm配置远程linux环境Can’t-get-remote-credentials-for-deployment-server" class="headerlink" title="Pycharm配置远程linux环境Can’t get remote credentials for deployment server"></a>Pycharm配置远程linux环境Can’t get remote credentials for deployment server</h3><p><img src="https://img-blog.csdnimg.cn/20190310181513265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NTg2OTkx,size_16,color_FFFFFF,t_70"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>把图片上显示的<code>Python interpreter</code>删除，然后重新设置，然后就可以正常使用了。</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>公变负荷特征探索</title>
    <url>/mywiki.github.io/56415/</url>
    <content><![CDATA[<h2 id="如何在服务器上拖动图片方法分辨率"><a href="#如何在服务器上拖动图片方法分辨率" class="headerlink" title="如何在服务器上拖动图片方法分辨率"></a>如何在服务器上拖动图片方法分辨率</h2><p>输入脚本所在服务器的文件地址</p>
<p>然后输入脚本名称，回车运行</p>
<p><img src="https://i.loli.net/2021/07/05/svi2YOu5NdWhqJp.png" alt="image-20210705182659435"></p>
<h2 id="公变特征探索"><a href="#公变特征探索" class="headerlink" title="公变特征探索"></a>公变特征探索</h2><p><img src="https://i.loli.net/2021/07/05/IZKPqvSLzCEoVhO.png" alt="image-20210705122701752"></p>
<h3 id="变频空调"><a href="#变频空调" class="headerlink" title="变频空调"></a>变频空调</h3><ol>
<li><p>暂态<img src="https://i.loli.net/2021/07/05/DtN2qh9MCn8fwgR.png" alt="image-20210705123007662"></p>
</li>
<li><p>稳态<img src="https://i.loli.net/2021/07/05/cjekZo3NEilmPad.png" alt="image-20210705123228556"></p>
<h3 id="格力变频空调—制热-苏泊尔电饭煲-香弹煮-格兰仕微波炉-高火"><a href="#格力变频空调—制热-苏泊尔电饭煲-香弹煮-格兰仕微波炉-高火" class="headerlink" title="格力变频空调—制热+苏泊尔电饭煲_香弹煮+格兰仕微波炉_高火"></a>格力变频空调—制热+苏泊尔电饭煲_香弹煮+格兰仕微波炉_高火</h3></li>
</ol>
<p><img src="https://i.loli.net/2021/07/06/Ic7RjvYV6UH9tm4.png" alt="image-20210705182305804"></p>
<p>格力定频空调</p>
<p><img src="https://i.loli.net/2021/07/06/SKloZ9IQGFaxVMX.png" alt="image-20210706095945945"></p>
<p><img src="https://i.loli.net/2021/07/06/C6zXIjMivYOHr3y.png" alt="image-20210706100102778"></p>
<p><img src="https://i.loli.net/2021/07/06/sZxzqty13McXDfK.png" alt="image-20210706100338520"></p>
<p><img src="https://i.loli.net/2021/07/06/Vb1IcjylZMefhP5.png" alt="image-20210706102749729"></p>
<p><img src="https://i.loli.net/2021/07/06/wUNqgBjuVSPaFDf.png" alt="image-20210706102325382"></p>
<p><img src="https://i.loli.net/2021/07/06/FN2hbaznykY3xSH.png" alt="image-20210706102358828"></p>
<p><img src="https://i.loli.net/2021/07/06/8Ugbd1Z9MQI256P.png" alt="image-20210706102416477"></p>
<p><img src="https://i.loli.net/2021/07/06/4yJlvWPD6hFScQg.png" alt="image-20210706103925432"></p>
<p><img src="https://i.loli.net/2021/07/06/YqBbXUkWHxa8hCj.png" alt="image-20210706103959441"></p>
<p><img src="https://i.loli.net/2021/07/06/YHmvXyUe9Squajp.png" alt="image-20210706104029346"></p>
<p><img src="https://i.loli.net/2021/07/06/ATlnKDH3eG6yfEv.png" alt="image-20210706111211345"></p>
<p><img src="https://i.loli.net/2021/07/06/uf1yE64U9WYaeHB.png" alt="image-20210706111825213"></p>
<p><img src="https://i.loli.net/2021/07/06/ZnUmvCFE8bL5Jdu.png" alt="image-20210706112006460"></p>
<p><img src="https://i.loli.net/2021/07/06/9SpIfUTv4beARja.png" alt="image-20210706112205286"></p>
<p><img src="https://i.loli.net/2021/07/06/rptQAvlXMuPSBco.png" alt="image-20210706113434913"></p>
<p><img src="https://i.loli.net/2021/07/06/sVtnOzFYjGJKmpA.png" alt="image-20210706154615326"></p>
<h2 id="对傅里叶算法的一点探索"><a href="#对傅里叶算法的一点探索" class="headerlink" title="对傅里叶算法的一点探索"></a>对傅里叶算法的一点探索</h2><p>调整数值序列的长度，结果得到的中心频率会反复变化。</p>
<p>例如：’/root/env36/venvs/Data_dky3/01单台电器运行波形文件/01_格力变频空调挂机_01_制热.mat’</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>io
<span class="token keyword">import</span> os

<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">import</span> FontProperties

my_font <span class="token operator">=</span> FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span><span class="token string">r'/root/env36/SIMHEI.TTF'</span><span class="token punctuation">)</span>

path <span class="token operator">=</span> <span class="token string">'/root/env36/venvs/Data_dky3/01单台电器运行波形文件'</span>

<span class="token comment"># path='/root/env36/venvs/Data_dky3/03场景级运行波形文件'</span>
file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
target_file <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.mat'</span><span class="token punctuation">:</span>
        target_file<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

target_file2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>target_file<span class="token punctuation">)</span>
mm <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> target_file2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token builtin">file</span> <span class="token operator">=</span> scipy<span class="token punctuation">.</span>io<span class="token punctuation">.</span>loadmat<span class="token punctuation">(</span>mm<span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">[</span><span class="token string">'CH2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
llen <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span>
data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>llen<span class="token punctuation">]</span>

<span class="token comment"># 0.005s的分辨率</span>
data2 <span class="token operator">=</span> data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 50=1s</span>
dfdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data2<span class="token punctuation">)</span>
dfdata01s <span class="token operator">=</span> dfdata<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>


start_n <span class="token operator">=</span> <span class="token number">300</span>  <span class="token comment"># 第130s为开始点</span>
<span class="token keyword">from</span> vmdpy <span class="token keyword">import</span> VMD
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fftpack <span class="token keyword">import</span> fft


plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
i<span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span> dd <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pp <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> start_n<span class="token punctuation">,</span> <span class="token number">50</span> <span class="token operator">*</span> <span class="token punctuation">(</span>start_n <span class="token operator">+</span> <span class="token number">20</span><span class="token operator">*</span>dd<span class="token punctuation">)</span><span class="token punctuation">)</span>
    mdata <span class="token operator">=</span> dfdata01s<span class="token punctuation">[</span>pp<span class="token punctuation">]</span>

    tau <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span>  <span class="token comment"># noise-tolerance (no strict fidelity enforcement)</span>
    K <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment"># 3 modes</span>
    DC <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># no DC part imposed</span>
    init <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># initialize omegas uniformly</span>
    tol <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">7</span>
    <span class="token triple-quoted-string string">"""
    alpha、tau、K、DC、init、tol 六个输入参数的无严格要求；
    alpha 带宽限制 经验取值为 抽样点长度 1.5-2.0 倍；
    tau 噪声容限 ；
    K 分解模态（IMF）个数；
    DC 合成信号若无常量，取值为 0；若含常量，则其取值为 1；
    init 初始化 w 值，当初始化为 1 时，均匀分布产生的随机数；
    tol 控制误差大小常量，决定精度与迭代次数
    """</span>

    alpha <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment"># moderate bandwidth constraint</span>
    u<span class="token punctuation">,</span> u_hat<span class="token punctuation">,</span> omega <span class="token operator">=</span> VMD<span class="token punctuation">(</span>mdata<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> tau<span class="token punctuation">,</span> K<span class="token punctuation">,</span> DC<span class="token punctuation">,</span> init<span class="token punctuation">,</span> tol<span class="token punctuation">)</span>
    mlen<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> mlen<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>fft<span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>mlen<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'IMF&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>my_font<span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'IMF&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>my_font<span class="token punctuation">)</span>
    i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="https://i.loli.net/2021/07/06/rTgM5nHe8uw26By.png" alt="image-20210706153239422"></p>
<h2 id="在lunix下复制目标文件到目标位置下"><a href="#在lunix下复制目标文件到目标位置下" class="headerlink" title="在lunix下复制目标文件到目标位置下"></a>在lunix下复制目标文件到目标位置下</h2><pre class="line-numbers language-none"><code class="language-none"># 复制某类文件
cp  *.png  one_app_list_pic

# 复制多个文件
cp ~&#x2F;Downloads&#x2F;&#123;file1.txt,file2.jpg,file3.odt&#125; ~&#x2F;Documents&#x2F;
cp ~&#x2F;Downloads&#x2F;*.&#123;jpg,png&#125; ~&#x2F;Pictures&#x2F;

#移动文件需要mv命令。语法与cp非常相似。
mv ~&#x2F;Downloads&#x2F;your-file.txt ~&#x2F;Documents&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>公司报销流程</title>
    <url>/mywiki.github.io/20256/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a63cfce49e7cc15ba977f20e0fd275c7c83d6838822e40bda4ee9f2f9de64362">2e54c7c9c1d3047002ddd50f0cee441ba0f915e79ee3793bcc7741c9afd249299d4896f4b3f29fc2e54b82e6ac491df88e39de69d4db30ae371db1e4a240a19263714c79c055c4285da346f85e301a64b5ad95f4c1ad229ddbd492908cece08b32ac8c41d0fb67a9bb5bff0a6b9e8076f2f2c3fb155827cb37420ed1030d24862058f779eea57d6f1dd72efe791ecf01650dfc15fbf4db56452287a593a323661cd29c1b3f0490628d642c3ef8150f2d36584cb32d5da5816260003b6072e93d3073af8817a54819ae6e884f85f847af94ac62081d9f30c72a73acfe43a0419f56c183153bdd325719fd9bacbedcf149b60426ee4a98ad3d17e4c3d15d12314e486b99b6519dcca5a22f040b98b3931b5e20732fa54da7d105a03b501f78ce6b89ab8465c092fdb18919cfc7b6e60a8f68255bcdcc6f508e92dd4e607fdfe9b67c0be531380fa1b46a3a03390808ab3968915b033c7a0c63dea678f7eceab86c4f931b04e793b3cd175a108535167dff7121b649dddcd603bdc5f61e87edf24658b025e53863735299c29db11270d644b8b4576e8f8626c3a7bf18c4db34ac33710f3fc592b1c8c66cd4254a238c07dd3c4df83743818462e380fa35082f47080793b620ab307178a2acbc60aa321c0f8326c41b74acda177ddf206e428a112ba1108ef7ac128701b1200887dfc244487b58ac642c59d408de54c7e3c08d74ad198a1f93886b5e0c7b0a89668bff230624b01eb534684cd464adf8986615068a0cd9e3d665d6c7f3a3e54aa872eddac4d4451455ea8c6c4a9cf7ff07cf214bc408777731b2844f978ae5da21dfb3b9ce93b5f85cab84ddcbe4155994e0e75a3ec6018e81415a7ba998df495a351c88dd0d552bb6f36f67c790e9a446ae716d6f7f3f74002e716ea47b92f9dbdeb9126bcbedd2d3e713b15c25f6db447f86db45544bc3db0a7de6b552602fe0584646f4f9423d20789d3a6aac924fd6de47eaf3549d621d709ef3fce37ac0c01e2f894db29a34464999c03f2d46b60bba076619d01e97228509b2d881232cbd280bb3f8d46db64e9bf029b8a3f8085a323c613e98322f659b04375283b38698c7c7bcf7495b69d4f2be8240c02f85323cc452cf17e91632d6f33eac0c9327669ea7532a59497d63ee42037971a53d90c45ec028eb5da1c2a3a74f08e1d2ae9ecc0e7a04e509bdc3cda71dd4dcea6b67cadccc0aa0b7e442d496c7c66a516059a999390fae5b2d13af8cfa7bd86d632770006356846fb0bda2fd7bb96d7c17c4e456691716db99f764af080264cc0cd769d6b8e71809cb48e6dca502fa9cf6c69d795721d5aad655935f21ba1bb2c61fc88063fe5add74bcade5058765357292e7a452020f7d111d08dc3535340f97eb6620e234cb5d24d1294ca195e9233a686c8b2754f9ccbab4c720df57454c5bb9de1260d5669fb6c33c29463f62ebaa7068e965958d9bc0a7ddd00181d40ae123f0f99008266f349023911eb7e1850fa0c8968f6a742af252c936089dd58bc3cd856fd2ca7430c8118ac050e8464e45e8bd08f6826e202d1a7575d64d1f500dadd750067bd6fbbf22045950ed56fa6a6e3165cfb45bca1f922ab9a17ee0664b6cfe9f42b4c40617dc52ee5ff781cdf8f2ff2f9a51529af106864cfaf419826924f05d768d0c44ee4eb918916e52e9f1c22522dd5f1ef19283e444a46824bf789f7dde45c2f593ae2bba337daa667bd545787aa6ae2e074e718cfc496c76bb90b57658956c1ab2f044d51d72244e0ec4402e7921e920875526d1e9b3fd1dc7136f6087e4113dfbe5710f1bb35818af59bb36811adcbe14bc520a9a401086519c3bc57dc6d1ce3b2a114df03b5fe83496fbda4ea45257237aec326349f6c5f82d8a1e59133afd4b4046ec62d7db91ff797d18cc777a2a1ac6e96a7d3a2c578ed0d2fd3d9ee9aae65e9780cbc7e3f7c7af2f926c06545b4ce677028773d60249adbb387647797f9b2110b145ff2891f34e347ae2d8af95d7e83b3a956cbe2d980fe25d39faca0ee6401e8fa3e965f82726bceb3c637622a30b0435df7d686dee1869470dd2459818285a7c081bda0dbe6855a353f31815367da0272bf1dae44cee3ee2f654ea1c1bedd2f2773e729a64753216963461ccfcff5c07714f1bd2786216469cba948507327f6095ecd1656e2a8371fcafbf6b4ece5608b4580f26525446f9611e4151bbeeae11c8f63e1f0246c729cb0c3306cf453c15c2019cce1890b00e82e05ef56b1cbff2dae5017b99143af4e6811edd65cad7202e69f3a9ebcf31def093f1d66e2d220840216f1e1bda6662b22b1684bdcaac30eabddb4536af1639304d144373e1a1024d63c2adeff8b3bd490b0f5d10728b6843116b2098fc66645ef7c8f7debbc448fb32ab6d63b088564e021c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/mywiki.github.io/lib/hbe.js"></script><link href="/mywiki.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>office</category>
      </categories>
      <tags>
        <tag>报销</tag>
      </tags>
  </entry>
  <entry>
    <title>如何保存KINDLE中的电子书</title>
    <url>/mywiki.github.io/59879/</url>
    <content><![CDATA[<h2 id="免费kindle电子书"><a href="#免费kindle电子书" class="headerlink" title="免费kindle电子书"></a>免费kindle电子书</h2><p>中文书，首先去<a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a>  搜索mobi格式的文件，导入kindle中。</p>
<p>然后是<a href="https://kgbook.com/">https://kgbook.com/</a>  以及<a href="https://www.toplinks.cc/s/">https://www.toplinks.cc/s/</a> 有一些免费电子书</p>
<p><a href="http://www.quzhuanpan.com/">http://www.quzhuanpan.com/</a>   需要登陆 是一个网盘搜索引擎，可以搜索bt和网盘资源还有资源分享等功能，搜索类型主要有影视、音乐、电子书、种子、软件等各种资源，搜索网盘为百度网盘。同时开发了PC端和app客户端，链接龙轩导航、哔哩哔哩、咪咕鱼等网站，功能十分强大。</p>
<p>最全面的<strong>Library Genesis</strong> 英文书 <a href="http://libgen.rs/">http://libgen.rs/</a>  免费下载</p>
<p><a href="http://www.gutenberg.org/">http://www.gutenberg.org/</a>  免费英文书 登堡计划是互联网上最早的免费电子书网站。它们拥有众多的志愿者，藏书量超过4万本。</p>
<ul>
<li><a href="http://www.amazon.com/b?node=2245146011">亚马逊免费 Kindle 下载</a></li>
<li><a href="https://www.kobo.com/us/en/p/free-ebooks">Kobo – 免费电子书</a></li>
<li><a href="https://play.google.com/store/books/collection/topselling_free">Google Play 免费电子书</a></li>
</ul>
<p>如果您已经拥有<a href="https://www.amazon.com/amazonprime/">Amazon Prime 会员资格</a>，这项服务以在两天或更短的时间内将超过 1 亿件产品直接运送到您家门口而闻名，您也可以阅读免费书籍。通过 Amazon Prime Reading，prime 会员可以无限制地访问数以千计的书籍、杂志、漫画和有声解说的书籍。</p>
<p> <a href="https://www.techworm.net/2018/11/best-torrent-sites-download-e-books.html">10 Best Torrent Sites To Download E-Books And AudioBooks For Free</a></p>
<p>Smashwords是卖出的电子书网站独立的作者和出版商。 目前有超过500000名来自100000多个出版作家 免费书在这里<a href="https://www.smashwords.com/shelves/home/1/free/any">https://www.smashwords.com/shelves/home/1/free/any</a>   </p>
<p>130万当代电子书的集合 <a href="https://archive.org/details/texts">https://archive.org/details/texts</a></p>
<p><a href="http://www.freebookspot.es/">http://www.freebookspot.es/</a>  FreeBookSpot是一个免费英文电子书大全网站，它提供有4485本免费电子书，分为96个分类，高达71.97GB。你可以通过分类搜索这些免费电子书，比如科学，工业，编辑，小说或其它电子书。并且没有注册要求，就可以免费下载电子书。</p>
<p><a href="https://www.epubbooks.com/">EpubBooks</a> 平台是一种自我出版和电子书籍分销的网站，本站所有的电子书籍都可以免费下载使用，并且可以读取所有流行的电子书阅读器，通过EpubBooks直接发布的多为经典小说</p>
<p><a href="https://www.getfreeebooks.com/">https://www.getfreeebooks.com/</a>  免费电子书</p>
<p><a href="https://www.free-ebooks.net/">https://www.free-ebooks.net/</a></p>
<p>FreeComputerBooks网址：<a href="http://freecomputerbooks.com/%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%93%E9%97%A8%E6%94%B6%E9%9B%86%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%BC%94%E8%AE%B2%E6%8A%A5%E5%91%8A%E5%92%8C%E6%95%99%E7%A8%8B%E7%AD%89%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86%E7%94%B5%E5%AD%90%E4%B9%A6%E7%9A%84%E7%BD%91%E7%AB%99%E3%80%82%E5%AE%83%E7%9A%84%E7%BD%91%E7%AB%99%E5%88%86%E7%B1%BB%E7%BB%93%E6%9E%84%E9%9D%9E%E5%B8%B8%E7%BB%86%E8%87%B4%EF%BC%8C%E8%BE%BE%E5%88%B012%E5%B1%82%E7%9A%84%E5%88%86%E7%B1%BB%E7%B3%BB%E7%BB%9F%EF%BC%8C%E8%B6%85%E8%BF%87150%E4%B8%AA%E5%AD%90%E5%88%86%E7%B1%BB%E3%80%82%E6%96%B9%E4%BE%BF%E4%BD%A0%E7%9A%84%E7%94%B5%E5%AD%90%E4%B9%A6%E6%90%9C%E7%B4%A2%E6%9F%A5%E6%89%BE%E3%80%82">http://freecomputerbooks.com/是一个专门收集计算机，编辑，数学，演讲报告和教程等专业知识电子书的网站。它的网站分类结构非常细致，达到12层的分类系统，超过150个子分类。方便你的电子书搜索查找。</a></p>
<p><a href="http://www.freetechbooks.com/">http://www.freetechbooks.com/</a> FreeTechBooks也是一个提供科技类免费电子书下载的网站，该网站提供的电子书都是符合法律要求或是版权协议，许可免费的。</p>
<p><a href="https://manybooks.net/">https://manybooks.net/</a>  登录后免费下载</p>
<h4 id="other-free-books"><a href="#other-free-books" class="headerlink" title="other free books"></a>other free books</h4><p><a href="http://knowfree.tradepub.com/">KnowFree</a> is the number one resource for professionals to access free research, white papers, reports, case studies, magazines, and eBooks.</p>
<p><a href="http://freecomputerbooks.com/">FreeComputerBooks</a> features eBook categories such as Computer, Lecture Notes, Mathematics, Tutorials, Programming, and Technical books.</p>
<p><a href="http://www.onlineprogrammingbooks.com/">OnlineProgrammingBooks</a> is a free site that can download eBooks and online books including mobile app development, programming, computer science, web design, software engineering, information technology, networking, and databases.</p>
<p><a href="http://www.bookyards.com/en/welcome">BookYards</a> provides education materials, information, documents, reference materials, and content that is free to anyone who has an internet connection.</p>
<p><a href="http://www.feedbooks.com/publicdomain">FeedBooks</a> distributes millions of books to an increasingly growing community of readers.</p>
<p><a href="http://digital.library.upenn.edu/books/">The Online Books Page</a> is a website that gives access to books that are freely readable over the Internet. It has over 2 million free books on the Web.</p>
<p><a href="http://www.ebooklobby.com/">eBookLobby</a> is divided into different categories such as business, art, computing, and education.</p>
<p><a href="http://www.oreilly.com/?cmp=af-npa--home_cj_11246204_7018660">O’Reilly</a> is a platform to download books, magazines, and tutorials for free.</p>
<h1 id="Self-Driven-Child"><a href="#Self-Driven-Child" class="headerlink" title="Self-Driven Child"></a>Self-Driven Child</h1><p>Freebooksy是一个免费的电子书博客，主要列出免费的Kindle书籍，但也有免费的Nook书籍。</p>
<blockquote>
<p>　　你可以从一些提供免费书籍的网站（例如 <a href="https://link.zhihu.com/?target=http://www.gutenberg.org/%EF%BC%89">古登堡计划</a>） 获取书籍，或者从你个人的存储空间（网盘或者NAS）下载。<a href="https://bookfere.com/">书伴网</a>可以下载免费电子书</p>
</blockquote>
<p>一个很棒的网站可以推送电子书到kindle，叫阅读链（<a href="http://www.yuedu.pro)可以试试,体验最好的一个网站了,关键是有50万本书,可以说是全网最全./">www.yuedu.pro）可以试试，体验最好的一个网站了，关键是有50万本书，可以说是全网最全。</a></p>
<p><a href="https://link.zhihu.com/?target=https://kindleshare.cn/">https://kindleshare.cn/</a> 支持Kindle资源搜索，这个网站不需要注册，不需要积分，轻轻一点就可以下载。</p>
<p>&lt;Kindle电子书的资源网站有哪些？&gt;</p>
<p><a href="https://www.yuedu.pro/">https://www.yuedu.pro/</a> 这个网站也不错。</p>
<p>ManyBooks.net是另一个免费的电子书网站，它在互联网上搜索最新和最新的免费Kindle书籍。目前，这里有超过33,000本免费电子书。</p>
<h2 id="下载并安装Kinder-PC版"><a href="#下载并安装Kinder-PC版" class="headerlink" title="下载并安装Kinder PC版"></a>下载并安装Kinder PC版</h2><p>登录亚区账户，准备将电子书下载到本地。</p>
<h2 id="下载需要移除DRM需要的2个工具"><a href="#下载需要移除DRM需要的2个工具" class="headerlink" title="下载需要移除DRM需要的2个工具"></a>下载需要移除DRM需要的2个工具</h2><p>calibre 最新版<br><a href="https://github.com/apprenticeharper/DeDRM_tools/releases">DeDRM_tools_7.2.1</a></p>
<p>安装calibre，打开“首选项”，选择“插件”<br>导入插件DeDRM_tools，安装完成之后，选择“自定义插件”<br>按儲存後，關掉Calibre再重新啓動就完成了。</p>
<h2 id="查看序列号"><a href="#查看序列号" class="headerlink" title="查看序列号"></a>查看序列号</h2><p>点击Kindle右上角“三道杠”菜单图标，选择“设置”，再点击“三道杠”，选择“设备信息”，在弹出的“设备信息”<br>准备填写Kindle设备的序列号，选择第一个。点击加号，填写设备序列号</p>
<p>关掉calibre软件，重启启动一次。再将电子书拖入，添加至书库的过程即为移除DRM的过程。<br>按需转换格式，enjoy！</p>
<h2 id="kindle-for-pc-软件开启，开始下载购买或者借阅的电子书"><a href="#kindle-for-pc-软件开启，开始下载购买或者借阅的电子书" class="headerlink" title="kindle for pc 软件开启，开始下载购买或者借阅的电子书"></a>kindle for pc 软件开启，开始下载购买或者借阅的电子书</h2><p>下载该软件后，打开代理，登陆中国区账号<br>通过Kindle for PC App下载您的图书<br>PC版Kindle的每本Kindle书籍都会有两个伴随文件（.MBP和.PHL文件）；您可以忽略无关的文件类型。<br>将您的书AW文件拖进Calibre界面。</p>
<h1 id="「EPUB输出」或者AZW3输出"><a href="#「EPUB输出」或者AZW3输出" class="headerlink" title="「EPUB输出」或者AZW3输出"></a>「EPUB输出」或者AZW3输出</h1><p>kindle原生环境只认mobi格式及其自有格式azw、azw3。<br>选择了「逐个转换」会针对每一本电子书弹出一个设置对话框，选择输出格式，进而可以导入其他电子阅读器。</p>
<h2 id="跨平台传输"><a href="#跨平台传输" class="headerlink" title="跨平台传输"></a>跨平台传输</h2><h3 id="方法1：-轻松快传"><a href="#方法1：-轻松快传" class="headerlink" title="方法1： 轻松快传"></a>方法1： 轻松快传</h3><p>离线上传mobi文件到<a href="https://easychuan.cn/%EF%BC%8C%E8%AE%B0%E4%BD%8F%E6%8F%90%E5%8F%96%E7%A0%81">https://easychuan.cn/，记住提取码</a>    当要发送的是epub文件时，后缀会变成一个选择器，可以选择改成azw3，再到Kindle上去下载阅读。</p>
<ol start="2">
<li>Kindle点击主页右上角打开体验浏览器，输入网址，填写提取码即可</li>
</ol>
<blockquote>
<p>　　通过 Kindle 内置浏览器下载电子书．</p>
</blockquote>
<h3 id="方法2：-calibre邮件发送"><a href="#方法2：-calibre邮件发送" class="headerlink" title="方法2： calibre邮件发送"></a>方法2： calibre邮件发送</h3><p>首先去注册并使用163邮箱，开启授权码：<img src="http://nos.netease.com/help/1847cf25bd9e7330a8c806b7b72da85c.jpg"></p>
<p><img src="http://nos.netease.com/help/3c04e033d596bba8e9ee97a3153d3a31.jpg"></p>
<p>例如！！XRDCVAVKHGXICICQ****！！</p>
<p>SMTP服务器: smtp.163.com  支持SSL连接</p>
<p>去calibre的首选项设置邮箱，然后</p>
<p><img src="https://i.loli.net/2021/07/01/4WauBZ6kwXsA8L7.png" alt="image-20210701163720297"></p>
<p>测试就会OK了！</p>
<p>然后<img src="http://mozheyang.top/images/KindleCalibre/snip_SendEmail.png"></p>
<p>一键推送电子书至 Kindle。</p>
<blockquote>
<p>亚马逊的云端，在这里你可以永久保存你的电子书数据，即使在 Kindle 本地删除了，你还是可以通过云端继续下载到本地，可谓有备无患！</p>
</blockquote>
<h2 id="多看阅读"><a href="#多看阅读" class="headerlink" title="多看阅读"></a>多看阅读</h2><p>导入kindle 的“多看阅读”系统：在dk_document目录下建立个新文件夹，再把mobi,txt，pdf等格式的文件拷进去就可以了。</p>
<h2 id="支持中国亚马逊的元数据下载"><a href="#支持中国亚马逊的元数据下载" class="headerlink" title="支持中国亚马逊的元数据下载"></a>支持中国亚马逊的元数据下载</h2><p>插件下载<a href="https://github.com/fated/calibre_amazon_cn">地址</a></p>
<p>修改文件___init__.py，将里面的，因为背后的python是3.0版本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Queue <span class="token keyword">import</span> Queue<span class="token punctuation">,</span> EQmpty
修改为
<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token punctuation">,</span> Empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>加上一个空的txt文件,命名为plugin-import-name-AMAZON_PRICE.txt 和上述的<br><strong>init</strong>.py以及 woker.py一起打包成为一个zip文件。</p>
<p>打开calibre,点击 首选项-&gt;插件-&gt;从文件安装插件,选择刚才那个zip文件。</p>
<p> 继续点击”自定义插件”选择要下载的元数据字段,选择要使用的Amazon网站为”china”,确定.建议尽量<strong>不要下载评分和出版日期</strong>,</p>
<p>也可以从 首选项-&gt;元数据下载 进入同样的配置界面</p>
<p>安装好了就开始下载元数据了!</p>
<h2 id="kindle-mate"><a href="#kindle-mate" class="headerlink" title="kindle mate"></a>kindle mate</h2><p>接：<a href="https://link.zhihu.com/?target=http://www.kmate.me/download">Download | Kindle Mate</a>「目前最新版本为1.31</p>
<p>运行Kindle Mate，使用USB线缆连接您的Kindle与电脑后，留意工具栏“Kindle已连接”提示，点击该图标或按快捷键F2快速同步，Kindle Mate将自动导入您Kindle中全部的标注笔记与生词本。</p>
<p>一旦您连接Kindle设备同步后，所有的数据与设置都会安全保存到您电脑上Kindle Mate的数据库文件中(km2.dat)，不受您Kindle设备损坏、遗失影响。随时备份该文件，或者将整个Kindle Mate目录运行在onedrive或dropbox网盘中保持同步是一个不错的主意！</p>
<p>在Kindle Mate上编辑标注笔记、生词、用法、释义、学习状态后，您可以将这些更改使用“同步到Kindle设备(快捷键F10)”同步保存至您的Kindle设备！</p>
]]></content>
      <tags>
        <tag>ebook</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在服务器上部署深度学习环境</title>
    <url>/mywiki.github.io/52113/</url>
    <content><![CDATA[<p>输入</p>
<pre class="line-numbers language-none"><code class="language-none">cat &#x2F;etc&#x2F;redhat-release #查看系统版本
cat &#x2F;proc&#x2F;version  #查看内核<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>#CentOS Linux release 7.8.2003 (Core)<br>redhat-7</p>
</blockquote>
<p>所以版本系统是centos7，   建议选择<strong>centos7-1908</strong>，这是笔者接触过的<strong>最稳定</strong>的版本。这套系统脱胎于RedHat——企业级系统，主打稳定性。</p>
<ul>
<li>虚拟机不是个好的选择。如果只是利用CPU训练神经网络，虚拟机是个好选择。如果读者已经有一块非常不错的显卡，虚拟机就是个坏的选择。</li>
</ul>
<p>输入：</p>
<p>python –version</p>
<p>查看python版本是2.7.5</p>
<p>但是服务器上存在python3.5</p>
<p>please check:</p>
<pre class="line-numbers language-none"><code class="language-none">which python3

$  &#x2F;usr&#x2F;bin&#x2F;python3

cd &#x2F;usr&#x2F;bin

cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;version.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="如何切换python版本？"><a href="#如何切换python版本？" class="headerlink" title="如何切换python版本？"></a>如何切换python版本？</h2><h3 id="如何构建虚拟环境"><a href="#如何构建虚拟环境" class="headerlink" title="如何构建虚拟环境"></a>如何构建虚拟环境</h3><p>pip3 install virtualenvwrapper</p>
<h4 id="需要python3进行开发时"><a href="#需要python3进行开发时" class="headerlink" title="需要python3进行开发时"></a>需要python3进行开发时</h4><pre class="line-numbers language-none"><code class="language-none">virtualenv -p &#x2F;usr&#x2F;bin&#x2F;python3.6 env36<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h4><p>source env36/bin/activate</p>
<p># 退出虚拟环境 deactivate</p>
<p># 删除虚拟环境 直接删掉文件即可 rm命令就行</p>
<h4 id="在文件中添加切换目录的命令："><a href="#在文件中添加切换目录的命令：" class="headerlink" title="在文件中添加切换目录的命令："></a>在文件中添加切换目录的命令：</h4><pre class="line-numbers language-none"><code class="language-none">cd  &#x2F;path&#x2F;to&#x2F;your&#x2F;project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h4 id="Installing-TensorFlow-or-torch"><a href="#Installing-TensorFlow-or-torch" class="headerlink" title="Installing TensorFlow or torch"></a>Installing TensorFlow or torch</h4><pre class="line-numbers language-none"><code class="language-none">pip3 install --upgrade tensorflow

pip3 install --upgrade torch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="查看是否成功"><a href="#查看是否成功" class="headerlink" title="查看是否成功"></a>查看是否成功</h4><pre class="line-numbers language-none"><code class="language-none">python -c &#39;import tensorflow as tf; print(tf.__version__)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看版本</p>
<blockquote>
<p>If you have a dedicated NVIDIA GPU and want to take advantage of its processing power, instead of <code>tensorflow</code> install the <code>tensorflow-gpu</code> package which includes GPU support.</p>
<p>Within the virtual environment, you can use the command <code>pip</code> instead of <code>pip3</code> and <code>python</code> instead of <code>python3</code>.</p>
</blockquote>
<p>所以应该使用tensorflow2.1.0  编译器使用GCC 7.3.1,构建工具BAZEL0.27.1  cuDNN7.6 CUDA10.1</p>
<p>please reference <a href="https://linuxize.com/post/how-to-install-tensorflow-on-centos-8/">here：How to Install TensorFlow on CentOS 8</a></p>
<h4 id="检查NVDIA显卡，"><a href="#检查NVDIA显卡，" class="headerlink" title="检查NVDIA显卡，"></a>检查NVDIA显卡，</h4><p>打开设备管理器，点击显示适配器。恭喜你，你可以安装GPU版本的tensorflow，安装教程的**[传送门]**<a href="https://blog.csdn.net/HGlyh/article/details/104172460?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1">GPU版本</a></p>
<p><img src="https://i.loli.net/2021/06/10/SGnx6DuQFzJZgET.png" alt="image-20210609153102589"></p>
<h3 id="CUDA安装"><a href="#CUDA安装" class="headerlink" title="CUDA安装"></a>CUDA安装</h3><p>CUDA又叫cuda-toolkit，是NVIDA公司专门开发的一套接口，方便利用GPU做高速计算。</p>
<p>查看CUDA版本：</p>
<p>$ nvcc -V</p>
<p>安装<code>GPU</code>版，请先安装如下两个驱动：</p>
<p>1、CUDA安装：<code>https://developer.nvidia.com/cuda-downloads</code></p>
<p>2、CuDNN安装：<code>https://developer.nvidia.com/cudnn</code>（要注册Nvidia用户，并加入CuDNN开发组，填若干问卷就可以下载了）选择下载版本时要注意和Cuda版本匹配。解压后覆盖至CUDA的安装目录下。</p>
<p>安装时没有注意cudnn版本要求，下载安装了cudnnv6.0，安装完后自己查找文件，只有cudnn64_6.dll，没有cudnn64_5.dll。</p>
<p>解决方案为将cudnnV6.0替换为cudnnV5.1即可。</p>
<p>即重新下载cudnn5.1版本。 <a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p>
<p>解决方案来自：<a href="http://blog.csdn.net/suo_ivy/article/details/70445103">http://blog.csdn.net/suo_ivy/article/details/70445103</a></p>
<p>验证系统是否有GCC编译环境，没有的话需要先安装GCC.</p>
<pre class="line-numbers language-none"><code class="language-none">gcc -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</p>
<p>查看Nouveau是否被禁止</p>
<pre class="line-numbers language-none"><code class="language-none">lsmod | grep nouveau
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>没有输出就是被禁用了</p>
<h4 id="安装基础依赖环境"><a href="#安装基础依赖环境" class="headerlink" title="安装基础依赖环境"></a>安装基础依赖环境</h4><pre class="line-numbers language-none"><code class="language-none">yum -y install gcc kernel-devel kernel-headers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>Package matching gcc-4.8.5-28.el7_5.1.x86_64 already installed. Checking for update.<br>No package kernel-devel available.<br>Package matching kernel-headers-3.10.0-862.14.4.el7.x86_64 already installed. Checking for update.<br>Nothing to do</p>
<p>手动下载tensorflow gpu版本文件：<br>tensorflow_gpu-0.12.0rc0-cp35-cp35m-win_amd64.whl<br>下载网址：<a href="https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-win_amd64.whl">https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-win_amd64.whl</a></p>
<p>下载完成后，打开cmd，切换到安装文件目录，输入:</p>
<p>pip install tensorflow_gpu-0.12.0rc0-cp35-cp35m-win_amd64.whl</p>
<p>即可成功安装。</p>
<p>确定tensorflow与cuda的对应关系</p>
<p>安装的tensorflow版本以及cuda版本后，需要进一步确定GPU显卡驱动、cuda之间的对应关系，可以去官网查看相应的网卡对应的驱动，下载下来：</p>
<p>NVIDIA官网链接：<a href="https://developer.nvidia.com/rdp/cudnn-archive#a-collapse742-10">https://developer.nvidia.com/rdp/cudnn-archive#a-collapse742-10</a></p>
<h2 id="GPU显卡驱动安装"><a href="#GPU显卡驱动安装" class="headerlink" title="GPU显卡驱动安装"></a>GPU显卡驱动安装</h2><h3 id="安装CUDA驱动"><a href="#安装CUDA驱动" class="headerlink" title="安装CUDA驱动"></a>安装CUDA驱动</h3><h3 id="检查驱动安装是否成功"><a href="#检查驱动安装是否成功" class="headerlink" title="检查驱动安装是否成功"></a><strong>检查驱动安装是否成功</strong></h3><ol>
<li><em># 查看GPU相关配置</em></li>
<li>nvidia-smi</li>
<li><em># 如果正常显示安装的显卡信息，则说明驱动安装成功；</em> </li>
<li><em># 如果提示找不到该指令，或什么信息都没有显示，则驱动安装失败，可以卸载驱动后重新安装</em></li>
</ol>
<h3 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h3><h3 id="安装CUDNN"><a href="#安装CUDNN" class="headerlink" title="安装CUDNN"></a>安装CUDNN</h3><h3 id="打开图形界面"><a href="#打开图形界面" class="headerlink" title="打开图形界面"></a>打开图形界面</h3>]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>tensorflow</tag>
        <tag>CentOS</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习笔记1</title>
    <url>/mywiki.github.io/53204/</url>
    <content><![CDATA[<h2 id="a-simple-test"><a href="#a-simple-test" class="headerlink" title="a simple test"></a>a simple test</h2><p>Tensorflow 由1.x 版本升级到2.x版本之后有很多用法、逻辑变动较大，需要逐渐了解。</p>
<p>例如，如果是tensorflow1.0版本的，代码是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

x <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个二阶张量等于[[1.0,2.0]]</span>
w <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个二阶张量</span>
y <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>

<span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>but!  if you input the comand <code>sess = tf.Session()</code> in Tensorflow 2.0 environment，ti will get an error message as below:</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
AttributeError<span class="token punctuation">:</span> module <span class="token string">'tensorflow'</span> has no attribute <span class="token string">'Session'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>修改一下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token keyword">with</span> tf<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>v1<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>
    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个二阶张量等于[[1.0,2.0]]</span>
    w <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个二阶张量</span>
    y <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就OK！</p>
]]></content>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>碳排放</title>
    <url>/mywiki.github.io/30907/</url>
    <content><![CDATA[<h1 id="欧洲碳市场有哪些经验？"><a href="#欧洲碳市场有哪些经验？" class="headerlink" title="欧洲碳市场有哪些经验？"></a>欧洲碳市场有哪些经验？</h1><p>源于：<a href="https://finance.sina.com.cn/wm/2021-05-16/doc-ikmyaawc5637224.shtml">https://finance.sina.com.cn/wm/2021-05-16/doc-ikmyaawc5637224.shtml</a></p>
<p>碳市场让欧洲的绿色能源投资走上可持续运行轨道。统计数据显示，2012年-2020年的八年时间里，欧盟仅通过在碳市场拍卖碳配额就获得了超过570亿欧元的总收入，这些资金投入到由欧盟资助的气候项目中。按照欧盟发布的《欧洲绿色协议投资计划》，未来10年内还要动员至少1万亿欧元的可持续投资进入碳中和和绿色经济领域。</p>
<h2 id="中国碳市场试点交易机制与履约政策—对企业影响分析"><a href="#中国碳市场试点交易机制与履约政策—对企业影响分析" class="headerlink" title="中国碳市场试点交易机制与履约政策—对企业影响分析"></a>中国碳市场试点交易机制与履约政策—对企业影响分析</h2><p>源于：<a href="https://www.eu-chinaets.org/upload/file/20210326/1616756494876617.pdf">https://www.eu-chinaets.org/upload/file/20210326/1616756494876617.pdf</a></p>
<p>巴斯夫 2020 年企业碳足迹  <a href="https://www.basf.com/cn/zh/who-we-are/sustainability/we-produce-safely-and-efficiently/energy-and-climate-protection/corporate-carbon-footprint.html">https://www.basf.com/cn/zh/who-we-are/sustainability/we-produce-safely-and-efficiently/energy-and-climate-protection/corporate-carbon-footprint.html</a></p>
<p>如何界定企业碳中和？<a href="https://news.bjx.com.cn/html/20210412/1146685.shtml">https://news.bjx.com.cn/html/20210412/1146685.shtml</a></p>
<p><strong>企业想搞碳中和，先搞明白这些“碳圈黑话”！</strong> <a href="https://finance.sina.com.cn/esg/investment/2021-02-23/doc-ikftpnny9179404.shtml">https://finance.sina.com.cn/esg/investment/2021-02-23/doc-ikftpnny9179404.shtml</a></p>
<p>《<strong>碳中和将倒逼企业的低碳转型</strong>》  <a href="https://ecep.ofweek.com/2021-03/ART-93000-8500-30490598.html">https://ecep.ofweek.com/2021-03/ART-93000-8500-30490598.html</a></p>
<p>苹果公司在2020年4月已经实现了100％碳中和运营，其下一阶段的目标是使其供应链和所有产品实现碳中和。</p>
<p>①供应链方面直接与供应商合作，帮助其减少能源使用，启动废弃物零填埋项目等。</p>
<p>②产品材料增加产品生产过程中低碳与可回收原材料的使用占比。</p>
<p>③继续使用100％可再生能源，同时持续推进整个产业链转向清洁能源转型。</p>
<p>④投资林业项目，通过自然的解决方案实现节能减排。</p>
]]></content>
      <categories>
        <category>新闻</category>
      </categories>
      <tags>
        <tag>欧洲</tag>
        <tag>碳市场</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读及思考</title>
    <url>/mywiki.github.io/39009/</url>
    <content><![CDATA[<p> to study nilm算法体系，需要from <a href="https://github.com/ch-shin/awesome-nilm">begin</a> to进行研究：</p>
<p>How to use the NILM code and examples：</p>
<p><a href="https://github.com/MingjunZhong/transferNILM">https://github.com/MingjunZhong/transferNILM</a></p>
<p>reading: 《Contextually Supervised Source Separation<br>with Application to Energy Disaggregation》</p>
<p>盲源分离算法有：</p>
<ul>
<li>概率潜在主成分分析 Probabilistic Latent Component Analysis (PLCA) (Smaragdis, Raj, and Shashanka 2006),</li>
<li>稀疏编码 sparse coding (Olshausen and Field 1997)</li>
<li>隐式因子马尔科夫 factorial hidden Markov models (FHMMs) (Ghahramani and Jordan 1997)</li>
</ul>
<p>$y_i$是单设备功率值</p>
<p>$y^(bar)$ 是总表功率</p>
<p>将总表数据分离为n个单设备功率和占比和设备类型</p>
<p><img src="https://i.loli.net/2021/05/21/qkDANbmIvPBaTd1.png" alt="image-20210521110921503"></p>
<p><img src="https://i.loli.net/2021/05/21/cwy7fx9ta3JQX85.png" alt="image-20210521110909657"></p>
<blockquote>
<p> 数学困难是不知道损失函数的计算如何用编码来实现的？</p>
<p>–可以搜索查询一下—github中是否有code?</p>
</blockquote>
<p>一个貌似可行的简单计算框架！</p>
<p><a href="https://github.com/ChristoferNal/multi-nilm">https://github.com/ChristoferNal/multi-nilm</a></p>
<p><a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:ChristoferNal/multi-nilm.git</p>
<p>结果是：</p>
<p>安装的依赖包太多了，很多代码我也看不懂，还是放弃吧！！</p>
]]></content>
      <categories>
        <category>tech</category>
        <category>论文阅读;学术</category>
      </categories>
      <tags>
        <tag>NILM</tag>
        <tag>能量分解</tag>
        <tag>无监督学习</tag>
        <tag>单通道源分离</tag>
      </tags>
  </entry>
  <entry>
    <title>食谱</title>
    <url>/mywiki.github.io/29897/</url>
    <content><![CDATA[<h1 id="做豆腐脑的高级做法"><a href="#做豆腐脑的高级做法" class="headerlink" title="做豆腐脑的高级做法"></a>做豆腐脑的高级做法</h1><p><a href="https://www.163.com/dy/article/FOJGRVSQ054201HA.html">https://www.163.com/dy/article/FOJGRVSQ054201HA.html</a></p>
]]></content>
      <categories>
        <category>食品</category>
      </categories>
      <tags>
        <tag>豆腐脑</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/mywiki.github.io/29283/</url>
    <content><![CDATA[<p>Imbalanced thinking：思维平衡？</p>
<p>如果你多走一会儿，或者做做俯卧撑或者慢跑，就会增强大脑的血流量，进而增强思维活性，让有助于启发更好的想法。</p>
<p><img src="https://i.loli.net/2021/05/20/Adtf4TCOHbiB9rY.png" alt="image-20210520103701345"></p>
<p>特别要注意愤怒情绪的后续行为决策，可以写邮件说“我很生气”这类事情，学会控制情绪，保存邮件后进行15分钟的剧烈运动。不但有助于增强肌肉力度，还会将所有的愤怒发泄出去，让自己变得平静下来。然后再以礼貌的方式保存一封邮件，仅说明重要事实即可。</p>
<h3 id="为什么儿童教育很重要？"><a href="#为什么儿童教育很重要？" class="headerlink" title="为什么儿童教育很重要？"></a>为什么儿童教育很重要？</h3><p>Only a well-educated child will be able to bring positivity to society, contribute to the economy of a nation, or even guide others towards living an enlightened life.</p>
<p><img src="https://i.loli.net/2021/05/20/eV5lP4rWcHDEMQz.png" alt="image-20210520105018785"></p>
<p><strong>Elon Musk</strong>不想把孩子送到美国普通学校读书，他认为这些学校没有能力让孩子学习到现在社会应该学习的知识。因此他在自己的工厂共同创办了以锁特殊的学校，以便让自己和受雇员工的孩子们可以在当代社会接受正确的教育。</p>
<p>为了使儿童获得最大的智力发展，必须创建安全，支持和互动的学习环境，以便儿童发展那些急需的批判性思维技能。与其简单地教育儿童，不如提供一种新颖的，发人深省的氛围，使幼儿教育能够蓬勃发展。实际上，在家里，父母在为子女提供学龄前教育时应遵循相同的模式。</p>
<p>在教育者和寻求教育者之间需要建立健康，支持和启发性的纽带。</p>
<h3 id="金钱能解决多少问题？"><a href="#金钱能解决多少问题？" class="headerlink" title="金钱能解决多少问题？"></a>金钱能解决多少问题？</h3><p>因为种族隔离，南非的黑人不被允许在白人地区开展业务，也未获得许可证。尽管有些黑人有足够的钱，但他们不快乐，因为他们的生活缺乏自由–做白人可以享受生活的自由。只有自由才能帮助他们过充实的生活。如果没有自由去做自己想做的事，生活就变得毫无意义。所以需要一部分团结起来，为争取自己的正当自由而奋斗。</p>
<p>为了取得成功，您需要自由的环境来选择专注于给定的领域。</p>
<h3 id="东南亚文化圈"><a href="#东南亚文化圈" class="headerlink" title="东南亚文化圈"></a>东南亚文化圈</h3><p>越南确实像韩国和日本一样，是中国圈的一部分，它们以狂热的职业道德而闻名（或声名狼藉？）。但是，与这些社会的相似之处主要在于“高级文化“high culture”领域（即儒家的哲学和价值观，来自中国的艺术影响力等）。</p>
<p>英国和日本人并不总是善良的统治者，但他们通过发展公共机构和基础设施，为马来西亚，新加坡，香港和台湾的未来现代化奠定了良好的基础。法国在1870年至1945年左右对越南的殖民化几乎完全集中在原材料的开采上，对越南的发展做出的积极贡献较少。</p>
<p>1975-1986年的饥荒，人类外流（“船民”）和整体经济灾难。直到1989年，政府的大部分资源和注意力都转移到了对柬埔寨的占领以及与中国的短暂破坏性边界战争上。由于这些冲突，越南在政治上和经济上与东盟国家，中国以及美国保持隔离，而后者则实行了贸易禁运。改革进程始于1986年，但直到1994年左右才开始与邻国和美国真正实现贸易和投资开放。那时，越南的经济陷入了困境。同时，她的许多邻居已经有了一些坚实的工业基础设施，并加入了全球制造业供应链。</p>
<p>中国在精简国有企业运营，出售无利可图的实体，以及通过向外部投资者大量发行股票为剩余的实体注入新鲜血液方面，情况要好得多。在越南，许多最大的国有企业仍由政府所有，而其他一些国有企业仍参与非核心和非战略性行业，例如啤酒酿造，酒店，食品加工，甚至向游客出售冰淇淋！</p>
<p>政府对基础设施发展的态度是混乱的，不系统的。越南没有将精力集中在几个可以带来整体“一掷千金”的大型项目上，而是将资源分散在许多经济价值不高的小型开发项目中（小型飞机场，海港，道路和精炼厂远离经济活动） ）。这通常归因于公共领域的力量薄弱，对省政府的中央控制有限以及“社会主义思维”，他们不想看到西贡和周边省份的发展速度超过全国其他地区。</p>
<p>越南的金融市场仍然很小且原始。股市仍处于“前沿”类别（以及保加利亚，孟加拉国和尼日利亚等国家）。债券的二级市场甚至根本不存在。结果，许多国家的潜在投资流入了低向往，非生产性和投机性资产（银行存款，外币，黄金和房地产）。<br>其他和相关的问题，例如普遍的裙带关系和腐败，高等教育体系差，“人才外流”等。</p>
<p>VN越南应该研究哪些社会和政治条件使所有这些不同群体得以蓬勃发展。</p>
<p>与过去相比，越南的年轻一代更加灵活，信息灵通。正如我所看到的，问题在于这些领导人正在与风险规避和短期思维的旧趋势背道而驰。好消息是，越南可以在政治和社会稳定以及免受外国干涉的时期中面对这些挑战，这在越南历史上几乎是前所未有的。</p>
<p>或许越南确实在变得更加富裕，但是却付出了环境，社会正义，文化，特性以及子孙后代的沉重代价。在某种程度上，当前模型（很大程度上依赖于资源开采，外国投资和建筑/房地产）的低挂成果将消失。当前这一代对“增长”的专心致志很少关注发展的更为微妙的无形方面，例如增长质量，责任感，效率，可持续性或文化/美学。</p>
<h3 id="知识和智慧"><a href="#知识和智慧" class="headerlink" title="知识和智慧"></a>知识和智慧</h3><pre><code>Difference Between Knowledge and Wisdom
</code></pre>
<p>尽管知识每天都在不断累积，但智慧却可以持续更长的时间。根据现有的情况，年龄和其他一些因素，知识可能会消失。但是，智慧是一种财富，一直持续到您最后一口气为止。</p>
<p>一个人一生可能参与许多辩论。但是，他可能缺乏对知识和智慧的一般认识。因此，在适当的时候，他无法充分利用自己的技能。</p>
<p>我们每天都在学习新事物并积累我们的知识。但是我们没有保留这些知识。在人生旅途中的某个时间点，它可能会消失。</p>
<p>什么是知识：我们从教育或经验中学到的信息，事实和技能。简而言之，它是一个主体的假设性或实践性感知。您可以将知识视为结合信息和学习的胶水。在缺乏相关知识的情况下，您可能会在艰难处境下生存下来。例如，如果您缺乏足够的阅读知识，则无法完全解读文本。</p>
<p>什么是智慧？ 经验丰富，知识渊博，对特定事件有适当的判断素质。具有很强的理解能力和觉察力。</p>
<p>智慧需要良好的感知能力和明确是非的判断能力。知识是对特定领域主题的熟练程度。通过深入研究和了解事实，任何人都可以实现对主题的了解。但是智慧需要更为深入的理解，并需要解决在某些情况下与哪些事实会产生相关影响的能力。</p>
<p>智慧致力于知识，并根据经验，评估所学知识而进行巧妙地实践知识。</p>
<p>知识与了解很多东西有关，而智慧则与在实际应用中保留和实现这些东西有关。</p>
<h3 id="教育的目标"><a href="#教育的目标" class="headerlink" title="教育的目标"></a>教育的目标</h3><p>教育的目的是向年轻人灌输人类精神和美德，使他们成长为不仅成为世界负责任的公民，而且成为照亮周围人类的领导之光。教育不应仅以机械方式分配课程而受到限制，而必须激发人们的思想。</p>
<p>如果现代教育能够成功地为学生提供使他们获得良好工作的学位，那么它就被认为是非常有效的。它已经变得非常唯物主义。</p>
<p>就像在自动化装配线上的工业中一样，可以进行学习。整个想法是培养拥有学位并在其他类似机构中获得最高薪水的工作的学生。</p>
<p>这种教学法的另一面就像是将水倒入桶中，向学生的大脑填充信息而不是知识。这就像将内容放入存储卡中一样。这最终导致学生对学习失去兴趣，并努力仅在考试中获得良好的成绩。</p>
<p>通常，过分强调评分系统会导致学生的价值观受到侵蚀。相对的评分系统使学生之间的竞争激烈，而不会成为愿意合作来获得知识的同事。</p>
<p>在极端情况下，这会导致学生精疲力尽，一些顶级研究所甚至自杀，无法应付缺乏人文精神的制度。</p>
<p>学生花费了大量的时间，不仅学习，而且体验并为周围的社会做出贡献。它传达了信念和价值观，有助于在我们不断发展的同时维持我们所生活的系统。对学习的热爱不仅是一个学术过程，而且是一种生活方式。</p>
<p>孩子就会理解这个概念。仅仅记住一个理论是不够的！有效的例子和视听材料引起了人们的兴趣。</p>
<p><img src="C:/Users/zx-176/AppData/Roaming/Typora/typora-user-images/image-20210520112314039.png" alt="image-20210520112314039"></p>
<p>参考<a href="https://www.beaninspirer.com/">https://www.beaninspirer.com/</a></p>
<p>Enrich your Mind and Life with Knowledge</p>
<p>用知识丰富您的思想和生活</p>
<p>Education: The Asset in Exploring Our Intellect and Building Our Character  教育：探索我们的智慧和树立人格的资产</p>
<p>Character Building is Vital for Education 品格建设对教育至关重要</p>
<p>想法不是对您打算做什么含糊不清或不清楚，而是SMART，它是“具体，可衡量，可实现，现实和有时限的目标”的首字母缩写。</p>
<p>An Educated Woman Plays An Important Role In Educating Her Next Generations 受教育的妈妈为什么很重要</p>
<p>通过远见，目标，创新，灵感，培训，动力，团队合作，专注和创造力取得成功的道路。无论您在哪里学习或在同班同学中的表现如何，都无关紧要。</p>
<p>重要的是您能够将学习到的东西应用到日常生活中。</p>
<p>要释放自由，教育是金钥匙。有教养的女人就像一个神奇的乘法器，其好处可以世代相传。</p>
<p>简单的逻辑是，受过教育的妇女可以更好地教育她的孩子。生活方式将变得更好；这给了更多的机会来养育更多的好孩子，因此一个国家受过教育的公民将成比例地增加。投资一个女人将确保收益传播给她周围的人和她的周围。妇女是每个家庭的重要组成部分，如果她受过教育并有足够的发展机会，那么好处将在各个领域得到体现-不仅在家庭内部，而且在整个社会。</p>
<p>常识健全教育</p>
<p>Common Sense Perfects Education</p>
<p>常识使一个人有足够的能力解决任何现实生活中的问题，并且只有在获得常规教育的适当过程中才能由个人自己培养。</p>
<p>受过良好教育的人可能并不总是对各处的知识都感到满意，而具有常识的人可以回答使他（她）超越他人的每个问题。</p>
<p>常识使人们能够轻松度过自己的生活，因为他们倾向于通过充分利用可用资源来立即解决生活给他们带来的问题。</p>
<p>它提供了对每种情况的意识和更好的理解。教育使人变得聪明，但这是使人变得聪明的常识。常识源于适应和分析。当一个人对情况本身使用自己的思想时，它以常识的形式提供了他/她的好主意。它使人们能够在最关键的情况下表达才华。</p>
<p>人类已经被赋予了智力才能。才智真正有能力支配思想。它有助于释放精神界限。以及它可以帮助头脑体验完全的自由。当我们出生于这个世界时，我们不介意我们没有偏好。</p>
<p>我们没有兴趣，我们没有喜欢或不喜欢。我们也没有任何感情或依恋。</p>
<p>随着时间的流逝，思维开始发展。在适应和成长的基础上，它开始发展个性。</p>
<p>政治自由是不够的，但是人们还必须在思想和生活方式上享有自由。他还敦促人们为实现自己的目标而努力，并实现导致经济自由的完美。人们不应厌倦工作或懒惰以忽略其职责。如果我们要取得值得克服思想狭narrow之处的东西，那么推理或逻辑思维是非常需要的素质。迷信的信仰和坏习惯不利于进步。这些降低了突破性发明或发现所必需的创造力和热情。有纪律的生活是一种了解自己对他人和社会的责任的生活。只有有纪律的人才能理解自由的真正价值和目的。他们为自己寻找挑战和责任。</p>
<p>每个伟大的领导者都对自己的任务和使命采取了这种方法。他们为他们树立了远见，他们通过严格地运用纪律来实现自己的生活。人们需要将自己从偏见中解放出来，这些偏见就像沙漠一样，可以使任何清晰的思想枯竭。要实现非同寻常或不寻常的事情，就需要扩大思想的狭窄范围。</p>
<p>更高的认识度使我们摆脱了以隐瞒动机指控他人的琐碎问题。一个心胸开阔的人将自己摆脱了将动机归因于他人行为的狭隘范围。让别人对我们的缺点和失败负责，意味着我们仍然处于别人控制之下的影响之下。</p>
<p>真正的自由意味着能够理解没有人能够压倒我们，这取决于我们如何充分利用处境和生活。自由是一种精神状态，其中一个人无所畏惧地说出自己的想法并遵循他认为最迷人的生活道路。</p>
<p>灵感是对自己的强烈信念。您必须研究自己并找到可以带来美好未来的品质。成为真实的你，那么只有你才能有勇气表达真实的感激。</p>
<p>只有勇敢的人知道如何原谅某人，一旦最初的情感浪潮冲走了我们</p>
<p>宽恕是为了我们自己的精神和平。这是我们所拥有的报仇感或任何不满情绪的释放，并给我们自己治愈的机会。并给自己留下摆脱愤怒和怨恨之痛的空间。</p>
<p>勇敢是面对危险而不是逃避危险。这是关于克服我们最大的恐惧。并与之抗争，直到它不再让我们恐惧为止，您会获得一定程度的内心平静。逃离只是暂时的措施；应对我们的危险，停留和战斗的急救解决方案是永久解决方案的希望。它有助于治愈恐惧的伤口。</p>
<p>英勇就是要走出自己的舒适区并克服恐惧。恐惧可能小到结识新朋友，与陌生人对话，在小型聚会上演讲或尝试冒险运动。待在舒适的地方永远不会带我们去任何地方，这只会使我们的生活停滞不前。没有进步。从开始担心的那一刻起，他就变得更有生产力了，因为他现在已经为新的和意料之外的变化做好了准备。这将进一步帮助他在将来突破自己的界限，并使他很容易利用自己的创造力和真正的自我。通过与他的恐惧作斗争，他变得勇敢，足够勇敢，足以承受他恐惧的结果。</p>
<p>Courage Gives Power To Attract Positive Energies</p>
<p>勇气赋予力量吸引正面能量</p>
<p>我和你都拥有的美德，只能等待态度的改变而被唤醒，或者开始改变我们的行为方式并向世界展示自己。勇气给予力量并像渠道一样使我们与更广阔的视野联系起来，也就是说，通过这种实践，我们将能够开阔视野了解我们迄今为止所忽略的生活各个方面，但是在从长远来看，无论是在工作中获得更高的职位，在学校展示项目，还是邀请男生或男生，长期生活都将帮助我们改善应对生活挑战的方式。</p>
<p>勇气只不过是通过成长并成为真正的自己来面对恐惧。通过做正确的事充满勇气与生活相遇</p>
<p>勇气和舒适感是同一枚硬币的两个方面。勇于实现目标应该是您的目标，因为舒适不会让您接受错误并勇往直前！</p>
<p>不管有什么生活给你。无论您走到哪里，只要有勇气，您都可以开始克服生活中看似困难的障碍。历史上许多伟大的思想家和领导人都过着这种美德。他们勇敢的思想和行动启发了人类。他们的想法可能在许多人中并不很受欢迎，但是他们仍然没有回避。他们追求做正确的事。他们可能已经失败多次，但仍在不断尝试。这种千方百计的态度是勇气。（例如医学家发现霍乱）</p>
<p>勇敢的人按照自己的条件生存和生活，并教导周围的每个人都做同样的事情。一个人必须一直勇于拥有世界上最好的一面，并拥有自己最大的个人满足感。</p>
<p>力量是坚强，而不是四肢，而在于灵魂的勇气。</p>
<p>您是否捍卫自己的价值观，道德风尚并向与之背道而驰的人表现出勇气？承认他人也反映出您的道德态度。道德力量是任何人都能拥有的最大力量。如果您欣赏别人，而不是欣赏自己的体力，那就是您真正的英勇。向一个人提供道德支持可以建立你的真实品格。</p>
<p>道德上的英勇可以帮助您克服恐惧，也不会让您害怕任何情况。有道德勇气的人总是有一个清晰的愿景，可以做任何事情，并对自己的人格充满信心。</p>
<p>了解消极思想的根本原因将有助于您将其转变为建设性和积极思想，从而使您为自己和周围的每个人创造魔力。积极思考可以导致强烈的免疫力，积极的情绪，幸福并极大地减少焦虑。所有这些导致良好的睡眠和良好的健康。</p>
<h2 id="学术"><a href="#学术" class="headerlink" title="学术"></a>学术</h2><h3 id="国家之间的心理距离"><a href="#国家之间的心理距离" class="headerlink" title="国家之间的心理距离"></a>国家之间的心理距离</h3><blockquote>
<p>从心理学和社会学的见解的基础上,本文展示了国家因素和认知过程的相互作用形成的不对称距离感知。 结果表明,接触到其他国家通过移民和文化商品和服务的进口不对称对心理距离的感知的影响。 这些影响的大小的大小似乎随祖国——较小的国家往往平均感知心理距离小于一样世界其他地方更大的。 目标国家的名誉地位相对于国内的发现是一个非线性、不对称影响距离感知。</p>
<p>据教授和辛格( 12 ),这些公司更容易了解市场的国家精神上接近,因为有一个隐含的假设,精神上接近国家更相似,相似比不同的公司更容易管理,从而使他们更有可能会成功( 10 ]。 由于心理距离会影响公司对不确定性的看法,因为这是基于人类感知和认知测量他们所知道的,或者认为他们知道。</p>
<p>from 《The psychology of psychic distance: Antecedents of asymmetric perceptions》—-Journal of World Business</p>
</blockquote>
]]></content>
      <categories>
        <category>思想，观念，学术</category>
      </categories>
      <tags>
        <tag>认知失调</tag>
        <tag>情绪</tag>
        <tag>大脑</tag>
      </tags>
  </entry>
  <entry>
    <title>hmm理论和公式编写</title>
    <url>/mywiki.github.io/63534/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201014180756922.png?x-oss-process=image/resize,m_fixed,h_64,w_64" alt="img"></p>
<h4 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h4><ol>
<li>(1st order) <strong>Markov assumption</strong> (for transition probability): $p(s_i|s_1, s_2, s_3, \dots, s_{i-1}) = p(s_i|s_{i-1})$</li>
<li><strong>Output independence</strong> (for emission probability) $p(o_i|s_1, s_2, s_3, \dots, s_{i-1}) = p(o_i|s_i)$</li>
</ol>
<h4 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h4><ul>
<li>$S = {s_1, s_2, s_3, \dots, s_i}$: a set of hidden states</li>
<li>$O = {o_1, o_2, o_3, \dots, o_i}$: a set of observed events</li>
<li>$A = a_{11}\dots a_{ij} \dots a_{NN}$: the state transition probability matrix</li>
<li>$B = b_i(o_t)$: the emission probability matrix</li>
<li>$\pi = {\pi_1, \pi_2, \pi_3, \dots, \pi_i}$: the initial state probability distribution</li>
</ul>
<h4 id="Likelihood"><a href="#Likelihood" class="headerlink" title="Likelihood"></a>Likelihood</h4><p>With HMM $\lambda = (A, B, \pi)$, compute the likelihood of observation sequence $O$.</p>
<h5 id="1-Naive-approach"><a href="#1-Naive-approach" class="headerlink" title="1. Naive approach"></a>1. Naive approach</h5><p>$O$: the observed sequence<br>$S$: one possible hidden state sequence<br>So we get the joint probability of them:<br>$$P(O, S) = P(O|S)P(S) = \prod_{i=1}^TP(o_i|s_i) \times \prod_{i=1}^TP(s_i|s_{i-1})\times \pi_{s_0}$$ Now we can compute the probability of the observed sequence $O$ with all possible hidden state sequences by marginal probability: $$\begin{aligned} P(O) &amp;= \sum_SP(O,S) \ &amp;= \sum_SP(O|S)P(S) \ &amp;= \sum_S\prod_{i=1}^TP(o_i|s_i) \times \prod_{i=1}^TP(s_i|s_{i-1}) \times \pi_{s_0} \end{aligned}$$<br>However, time complexity is huge $TN^T$. Instead we use forward algorithm, a dynamic programming approach, whose time complexity is $TN^2$.</p>
<h5 id="2-Forward-algorithm"><a href="#2-Forward-algorithm" class="headerlink" title="2. Forward algorithm"></a>2. Forward algorithm</h5><p>Define the probability of being in state $j$ after seeing $t$ observations (<strong>with all possible hidden state sequences till $\bold t$</strong>), given the parameter sets $\lambda(A, B, \pi)$ $$\begin{aligned} \alpha_t(j) &amp;= P(o_1, o_2, o_3, \dots, o_t, s_t=j) \ &amp;= \left[ \sum_{i=1}^N\alpha_{t-1}(i)a_{ij}\right] b_j(o_t) \end{aligned}$$</p>
<ul>
<li><strong>Initialization</strong> $$\alpha_1(j) = \pi_jb_j(o_1) \quad 1 \le j \le N$$</li>
<li><strong>Loop</strong> $$\alpha_t(j) = \left[ \sum_{i=1}^N\alpha_{t-1}(i)a_{ij}\right] b_j(o_t) \quad 1 \le j \le N, 1 &lt; t \le T$$</li>
<li><strong>Termination</strong> $$P(O|\lambda) = \sum_{i=1}^N\alpha_T(i)$$</li>
</ul>
<h5 id="3-Backward-algorithm"><a href="#3-Backward-algorithm" class="headerlink" title="3. Backward algorithm"></a>3. Backward algorithm</h5><p>Define the probability of seeing the observations from time $t + 1$ to $T$ (<strong>with all possible hidden state sequences till $\bold{t+1}$</strong>), given that we are in state $j$ at time $t$.<br>$$\beta_t(j) = P(o_{t+1}, o_{t+2}, \dots, o_T|s_t=j)$$</p>
<ul>
<li><strong>Initialization</strong> $$\beta_T(j) = 1 \quad 1 \le j \le N$$</li>
<li><strong>Loop</strong> $$\beta_t(j) = \sum_{i=1}^N\beta_{t+1}(i)a_{ji}b_i(o_{t+1}) \quad 1 \le j \le N, 1 \le t &lt; T$$</li>
<li><strong>Termination</strong> $$P(O|\lambda) = \sum_{i=1}^N\pi_i\beta_1(i)b_i(o_1)$$</li>
</ul>
<h4 id="Decoding"><a href="#Decoding" class="headerlink" title="Decoding"></a>Decoding</h4><p>With HMM $\lambda = (A, B, \pi)$, and the observation sequence $O$, compute the most possible hidden state sequence $S$.</p>
<h5 id="1-Naive-approach-1"><a href="#1-Naive-approach-1" class="headerlink" title="1. Naive approach"></a>1. Naive approach</h5><p>Enumerate all possible hidden state sequences, compute relative likelihoods with forward algorithm, and choose the biggest one. Still with time complexity of $N^T$ to list all state sequences.</p>
<h5 id="2-Viterbi-algorithm"><a href="#2-Viterbi-algorithm" class="headerlink" title="2. Viterbi algorithm"></a>2. Viterbi algorithm</h5><p>Define the probability of being in state $j$ after seeing $t$ observations and passing through the most possible state sequence $s_1 \dots s_{t−1}$ that maximizes the likelihood. $$v_t(j) = \max_{s_1, \dots, s_{t-1}}P(s_{1} \dots s_{t-1}, o_1 \dots o_t, s_t = j)$$</p>
<p>Besides to the regular probability matrix like forward algorithm, we need another <strong>backpointer matrix</strong> that records the paths, where each cell records the coming state id.</p>
<ul>
<li><strong>Initialization</strong> $$v_1(j) = \pi_jb_j(o_1) \quad 1 \le j \le N$$ $$bt_1(j) = 0 \quad 1 \le j \le N$$</li>
<li><strong>Loop</strong> $$v_t(j) = \max_{i=1}^Nv_{t-1}(i)a_{ij} b_j(o_t) \quad 1 \le j \le N, 1 &lt; t \le T$$ $$bt_t(j) = argmax_{i=1}^Nv_{t-1}(i)a_{ij} b_j(o_t) \quad 1 \le j \le N, 1 &lt; t \le T$$</li>
<li><strong>Termination</strong> $$\hat P = \max_{i=1}^Nv_T(i)$$ $$\hat s_T = argmax_{i=1}^Nv_T(i)$$</li>
</ul>
<h4 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h4><p>Given the observation sequences $\sum_{i=0}^nO$, and a set of labels $\sum_{j=0}^mS$， compute the HMM parameters $\lambda = (A, B, \pi)$.<br>This could be resolved by EM algorithm.</p>
<h5 id="1-Expectations"><a href="#1-Expectations" class="headerlink" title="1. Expectations"></a>1. Expectations</h5><ol>
<li>Given observation $O$ and and the $\lambda = (A, B, \pi)$, we have the probability of being at state $s_i$ at time $t$ <em>(no transition)</em>:<br>$$\gamma_t(i) = P(i_t = s_i | O,\lambda) = \frac{P(i_t = s_i ,O|\lambda)}{P(O|\lambda)} = \frac{P(i_t = s_i ,O|\lambda)}{\sum\limits_{j=0}^NP(i_t = s_j ,O|\lambda)}$$<br>By definitions of forward and backward algorithms: $$P(i_t = s_i ,O|\lambda) = \alpha_t(i)\beta_t(i)$$<br>Why?<br>$$\alpha_t(i) = P(o_1,o_2,…o_t, i_t =s_i | \lambda)$$<br>$$\beta_t(i) = P(o_{t+1},o_{t+2},…o_T| i_t =s_i, \lambda)$$<br>$$\begin{aligned} \alpha_t(i)\beta_t(i) &amp;= P(o_1,o_2,…o_t, i_t =s_i | \lambda) \times P(o_{t+1},o_{t+2},…o_T| i_t =s_i , \lambda) \ &amp;= P(i_t = s_i, o_1,o_2,…o_t, o_{t+1},o_{t+2},…o_T |\lambda) \ &amp;= P(i_t = s_i, O|\lambda) \end{aligned}$$<br>This is probability of being at state $i$ at time $t$; we can sum over all probabilities of being at all states at this $t$, so we have: $$\gamma_t(i) = \frac {\alpha_t(i)\beta_t(i)}{\sum\limits_{j=1}^N \alpha_t(j)\beta_t(j)}$$</li>
<li>Given observation $O$ and and the $\lambda = (A, B, \pi)$, we have the probability of being at state $s_i$ at time $t$, and at state $s_j$ at time $t + 1$ <em>(transition)</em>: $$\xi_t(i,j) = P(i_t = s_i, i_{t+1}=s_j| O,\lambda) = \frac{P(i_t = s_i, i_{t+1}=s_j, O|\lambda)}{P(O|\lambda)} =\frac{P(i_t = s_i, i_{t+1}=s_j, O|\lambda)}{\sum\limits_{k=0}^N\sum\limits_{l=0}^NP(i_t = s_k, i_{t+1}=s_l, O|\lambda)}$$<br>By definitions of forward and backward algorithms:<br>$$P(i_t = s_i, i_{t+1}=s_j, O|\lambda) = \alpha_t(i)a_{ij}b_j(o_{t+1})\beta_{t+1}(j)$$<br>Why?<br>$$\alpha_t(i)a_{ij}b_j(o_{t+1})\beta_{t+1}(j) = P(o_1,o_2,…o_t, i_t =s_i | \lambda) \times a_{ij} \times b_j(o_{t+1}) \times P(o_{t+2},o_{t+3},…o_T| i_t =s_j, \lambda)$$<br>We can sum over all possible state transitions at this time $t$, so we have:<br>$$\xi_t(i,j) = \frac{\alpha_t(i)a_{ij}b_j(o_{t+1})\beta_{t+1}(j)}{\sum\limits_{k=0}^N\sum\limits_{l=0}^N\alpha_t(k)a_{kl}b_l(o_{t+1})\beta_{t+1}(l)}$$</li>
<li>In all, we have:<ul>
<li>Expectation of being at state $i$ given observation $O$: $\sum\limits_{t=1}^T\gamma_t(i)$</li>
<li>Expectation of transiting from state $i$ given observation $O$: $\sum\limits_{t=1}^{T-1}\gamma_t(i)$</li>
<li>Expectation of transiting from state $i$ to $j$ given observation $O$: $\sum\limits_{t=1}^{T-1}\xi_t(i,j)$</li>
</ul>
</li>
</ol>
<h5 id="2-Maximization"><a href="#2-Maximization" class="headerlink" title="2. Maximization"></a>2. Maximization</h5><p>$Q$ function of EM (Baum-Welch):<br>$$\begin{aligned} Q(\lambda, \overline{\lambda}) &amp;= \sum_{I}P(I|O,\overline{\lambda})logP(O,I|\lambda) \ &amp;= \sum_{I} \frac {P(O, I|\overline{\lambda})}{\textcolor{red}{P(O|\overline{\lambda})}}logP(O,I|\lambda) \ &amp;= \sum_{I}P(O, I|\overline{\lambda})logP(O,I|\lambda) \end{aligned}$$<br>So the $\overline{\lambda}$ we want could be computed from:<br>$$\overline{\lambda} = argmax_{\lambda}\sum\limits_{I}P(O,I|\overline{\lambda})logP(O,I|\lambda)$$<br>Since $$P(O,I|\lambda) = \prod_{d=1}^D\pi_{i_1^{(d)}}b_{i_1^{(d)}}(o_1^{(d)})a_{i_1^{(d)}i_2^{(d)}}b_{i_2^{(d)}}(o_2^{(d)})…a_{i_{T-1}^{(d)}i_T^{(d)}}b_{i_T^{(d)}}(o_T^{(d)})$$<br>Plug in and we get:<br>$$\overline{\lambda} = argmax_{\lambda}\sum\limits_{d=1}^D\sum\limits_{I}P(O,I|\overline{\lambda}) \left[ log\pi_{i_1} + \sum\limits_{t=1}^{T-1}log;a_{i_t,i_{t+1}} + \sum\limits_{t=1}^Tlog b_{i_t}(o_t) \right]$$<br>We could maximize 3 components 1 by 1:</p>
<ul>
<li>$$\overline{\pi_i} = argmax_{\pi_{i_1}} \sum\limits_{d=1}^D\sum\limits_{I}P(O,I|\overline{\lambda})log\pi_{i_1} = argmax_{\pi_{i}} \sum\limits_{d=1}^D\sum\limits_{i=1}^NP(O,i_1^{(d)} =i|\overline{\lambda})log\pi_{i}$$<br>Since $\sum\limits_{i=1}^N\pi_i =1$ as a constraint, we apply Lagrange Multiplier Method here:<br>$$\overline{\pi_i} = argmax_{\pi_{i}}\sum\limits_{d=1}^D\sum\limits_{i=1}^NP(O,i_1^{(d)} =i|\overline{\lambda})log\pi_{i} + \gamma(\sum\limits_{i=1}^N\pi_i -1)$$<br>Take derivation on above and make it equal to 0, we have:<br>$$\sum\limits_{d=1}^DP(O,i_1^{(d)} =i|\overline{\lambda}) + \gamma\pi_i = 0$$<br>Make $i$ from 1 to $N$ and sum them all over, we have:<br>$$\sum\limits_{d=1}^D\sum\limits_{n=1}^NP(O,i_1^{(d)} = n|\overline{\lambda}) + \sum\limits_{n=1}^N\gamma\pi_n = 0$$<br>Again since $\sum\limits_{i=1}^N\pi_i =1$, and $\sum\limits_{n=1}^NP(O,i_1 = n|\overline{\lambda}) = P(O|\overline{\lambda})$ <em>(marginal probability of $O$)</em>. Plug in these two we have:<br>$$\begin{aligned} \sum\limits_{d=1}^D\sum\limits_{n=1}^NP(O,i_1^{(d)} = n|\overline{\lambda}) + \gamma &amp;= 0\ \sum\limits_{d=1}^DP(O|\overline{\lambda}) + \gamma &amp;= 0 \end{aligned}$$<br>Now we have value of $\gamma$, plug in $\gamma$ we have:<br>$$\pi_i =\frac{\sum\limits_{d=1}^DP(O,i_1^{(d)} =i|\overline{\lambda})}{\sum\limits_{d=1}^DP(O|\overline{\lambda})} = \frac{\sum\limits_{d=1}^DP(O,i_1^{(d)} =i|\overline{\lambda})}{DP(O|\overline{\lambda})} = \frac{\sum\limits_{d=1}^DP(i_1^{(d)} =i|O, \overline{\lambda})}{D} = \frac{\sum\limits_{d=1}^DP(i_1^{(d)} =i|O^{(d)}, \overline{\lambda})}{D}$$<br>Since in the Expectation step we have:<br>$$\gamma_1^{(d)}(i) = P(i_1^{(d)} =i|O^{(d)}, \overline{\lambda})$$<br>So we have:<br>$$\pi_i = \frac{\sum\limits_{d=1}^D\gamma_1^{(d)}(i)}{D}$$</li>
<li>$$\overline{a_{ij}} = argmax_{a_{ij}}\sum\limits_{d=1}^D\sum\limits_{I}\sum\limits_{t=1}^{T-1}P(O,I|\overline{\lambda})log;a_{i_t,i_{t+1}} = \sum\limits_{d=1}^D\sum\limits_{i=1}^N\sum\limits_{j=1}^N\sum\limits_{t=1}^{T-1}P(O,i_t^{(d)} = i, i_{t+1}^{(d)} = j|\overline{\lambda})loga_{ij}$$<br>We have $\sum\limits_{j=1}^Na_{ij} =1$, use Lagrange Multiplier Method and take derivation and get:<br>$$\begin{aligned} a_{ij} &amp;= \frac{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}P(O^{(d)}, i_t^{(d)} = i, i_{t+1}^{(d)} = j|\overline{\lambda})}{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}P(O^{(d)}, i_t^{(d)} = i|\overline{\lambda})} \ &amp;= \frac {\frac {\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}P(O^{(d)}, i_t^{(d)} = i, i_{t+1}^{(d)} = j|\overline{\lambda})}{\textcolor{green}{\sum\limits_{d=1}^DP(O^{(d)}|\overline{\lambda}))}}} { \frac {\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}P(O^{(d)}, i_t^{(d)} = i|\overline{\lambda})} {\textcolor{green}{\sum\limits_{d=1}^DP(O^{(d)}|\overline{\lambda}))}} } \ &amp;= \frac {\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}P(i_t^{(d)} = i, i_{t+1}^{(d)} = j|O^{(d)}, \overline{\lambda})} {\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}P(i_t^{(d)} = i | O,\overline{\lambda})} \end{aligned}$$<br>Again, since in Expectation step, we have:<br>$$\xi_t^{(d)}(i,j) = P(i_t^{(d)} = i, i_{t+1}^{(d)} = j|O^{(d)}, \overline{\lambda})$$<br>$$\gamma_t^{(d)}(i) = P(i_t^{(d)} = i | O,\overline{\lambda})$$<br>So we have:<br>$$a_{ij} = \frac{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}\xi_t^{(d)}(i,j)}{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}\gamma_t^{(d)}(i)}$$</li>
<li>$$\overline{}\sum\limits_{d=1}^D\sum\limits_{I}\sum\limits_{t=1}^{T}P(O,I|\overline{\lambda})log;b_{i_t}(o_t) = \sum\limits_{d=1}^D\sum\limits_{j=1}^N\sum\limits_{t=1}^{T}P(O,i_t^{(d)} = j|\overline{\lambda})log;b_{j}(o_t)$$<br>Since $\sum\limits_{k=1}^Mb_{j}(k) =1$, we apply the same procedure as above, and have:<br>$$\begin{aligned} b_{j}(k) &amp;= \frac{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T}P(O,i_t^{(d)} = j|\overline{\lambda})I(o_t^{(d)}=v_k)}{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T}P(O,i_t^{(d)} = j|\overline{\lambda})} \ &amp;= \frac{\sum\limits_{d=1}^D\sum\limits_{t=1, o_t^{(d)}=v_k}^{T}\gamma_t^{(d)}(j)}{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T}\gamma_t^{(d)}(j)} \end{aligned}$$</li>
<li>In all, we have:<br>$$\pi_i = \frac{\sum\limits_{d=1}^D\gamma_1^{(d)}(i)}{D}$$<br>$$a_{ij} = \frac{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}\xi_t^{(d)}(i,j)}{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T-1}\gamma_t^{(d)}(i)}$$<br>$$b_{j}(k) = \frac{\sum\limits_{d=1}^D\sum\limits_{t=1, o_t^{(d)}=v_k}^{T}\gamma_t^{(d)}(j)}{\sum\limits_{d=1}^D\sum\limits_{t=1}^{T}\gamma_t^{(d)}(j)}$$</li>
</ul>
]]></content>
      <categories>
        <category>图集</category>
        <category>tech</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>HMM</tag>
      </tags>
  </entry>
  <entry>
    <title>NILM技术框架梳理</title>
    <url>/mywiki.github.io/5636/</url>
    <content><![CDATA[<h2 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h2><p><img src="https://i.loli.net/2021/07/08/C5nVo8k7TLFBrjP.png" alt="image-20210708181803759"></p>
<h2 id="碎片想法测试"><a href="#碎片想法测试" class="headerlink" title="碎片想法测试"></a>碎片想法测试</h2><h2 id="增加一个开源code存放地"><a href="#增加一个开源code存放地" class="headerlink" title="增加一个开源code存放地"></a>增加一个开源code存放地</h2><p><a href="https://codechina.csdn.net/explore">https://codechina.csdn.net/explore</a></p>
<h2 id="找到一个国外开源code样例的网站"><a href="#找到一个国外开源code样例的网站" class="headerlink" title="找到一个国外开源code样例的网站"></a>找到一个国外开源code样例的网站</h2><p><a href="https://python.hotexamples.com/">https://python.hotexamples.com/</a></p>
<h2 id="find-another-method-to-get-what-code-sample-you-need"><a href="#find-another-method-to-get-what-code-sample-you-need" class="headerlink" title="find another method to get what code sample you need"></a>find another method to get what code sample you need</h2><p>“Ridge Regression” site:<a href="https://towardsdatascience.com/">https://towardsdatascience.com</a>  in google research</p>
<h2 id="对NILM算法的修改"><a href="#对NILM算法的修改" class="headerlink" title="对NILM算法的修改"></a>对NILM算法的修改</h2><h3 id="感觉HMM算法可以模拟生成样本，基于给定的均值和方差，因此可以采取减法提取新的单一设备样本数据"><a href="#感觉HMM算法可以模拟生成样本，基于给定的均值和方差，因此可以采取减法提取新的单一设备样本数据" class="headerlink" title="感觉HMM算法可以模拟生成样本，基于给定的均值和方差，因此可以采取减法提取新的单一设备样本数据"></a>感觉HMM算法可以模拟生成样本，基于给定的均值和方差，因此可以采取减法提取新的单一设备样本数据</h3><p>然后采取DWT动态相似度进行匹配<br>采用岭回归求解参数</p>
<p>############################</p>
<h3 id="CO组合优化算法的核心code"><a href="#CO组合优化算法的核心code" class="headerlink" title="CO组合优化算法的核心code"></a>CO组合优化算法的核心code</h3><p>############################<br>summed_power_of_each_combination = np.sum(state_combinations, axis=1) #计算不同状态对应功率的叠加值</p>
<h3 id="Start-disaggregation-将组合状态对应的叠加功率值与总表功率值进行匹配"><a href="#Start-disaggregation-将组合状态对应的叠加功率值与总表功率值进行匹配" class="headerlink" title="Start disaggregation 将组合状态对应的叠加功率值与总表功率值进行匹配"></a>Start disaggregation 将组合状态对应的叠加功率值与总表功率值进行匹配</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">indices_of_state_combinations<span class="token punctuation">,</span> residual_power <span class="token operator">=</span> find_nearest<span class="token punctuation">(</span>
            summed_power_of_each_combination<span class="token punctuation">,</span> mains<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>




<p>​            </p>
<p>#########################</p>
<h1 id="计算拟合残差"><a href="#计算拟合残差" class="headerlink" title="计算拟合残差"></a>计算拟合残差</h1><p>#######################</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compute_rmse</span><span class="token punctuation">(</span>gt<span class="token punctuation">,</span> pred<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">### 评估指标 rmse</span>
    <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error
    rms_error <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> appliance <span class="token keyword">in</span> gt<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>
        rms_error<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>gt<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">,</span> pred<span class="token punctuation">[</span>appliance<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">## 评价指标的定义很简单，就是均方根误差</span>
    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>rms_error<span class="token punctuation">)</span>
rmse <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h1 id="查看某一函数运行时间的code"><a href="#查看某一函数运行时间的code" class="headerlink" title="查看某一函数运行时间的code"></a>查看某一函数运行时间的code</h1><p>###############################</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">known_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
test_array <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Speedups:'</span><span class="token punctuation">)</span>
base_time <span class="token operator">=</span> time_f<span class="token punctuation">(</span><span class="token string">'base'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> func_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'diffs'</span><span class="token punctuation">,</span> <span class="token string">'searchsorted1'</span><span class="token punctuation">,</span> <span class="token string">'searchsorted2'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> func_name <span class="token operator">+</span> <span class="token string">' is x%.1f faster than base.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>base_time <span class="token operator">/</span> time_f<span class="token punctuation">(</span>func_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> np<span class="token punctuation">.</span>allclose<span class="token punctuation">(</span>base<span class="token punctuation">(</span>known_array<span class="token punctuation">,</span> test_array<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>func_name<span class="token operator">+</span><span class="token string">'(known_array, test_array)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>​<br>########################################</p>
<p>dwt code:</p>
<pre><code>     import fastdtw
distance, dtw_path = fastdtw.fastdtw(src_features, tgt_features)

import fastdtw
def nearest(self, rsp):
    test_seq = rsp
    all_dists = [[fastdtw.fastdtw(test_seq, r, dist=euclidean)[0] for r in random.sample(class_seqs, self.K)] for class_seqs in self.tr_seqs]
    min_dists = [min(dists) for dists in all_dists]
    return np.argmin(min_dists)
</code></pre>
<p>​<br>​     def run(self):<br>​         result = np.empty((0, self.len_data), float)<br>​         for i in self.my_range:<br>​             x = pd.concat([pd.DataFrame(range(1,len(self.data)+1)),self.data.ix[:,i]], axis =1)<br>​             x = np.array(x)<br>​         temp = np.empty(shape = [1, self.len_data])<br>​         for j in range(self.len_data):<br>​             y = pd.concat([pd.DataFrame(range(1,len(self.data)+1)),self.data.ix[:,i]], axis =1)<br>​             y = np.array(y)<br>​             distance = fastdtw(x, y, dist= cosine)<br>​             temp[0,j] = distance<br>​         result = np.append(result, np.array(temp), axis=0)<br>​     score = pd.DataFrame(data = result)<br>​     score.to_csv(out_path +str(self.index).zfill(3) + “thread.txt”, header = None, index = False)</p>
]]></content>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
</search>
